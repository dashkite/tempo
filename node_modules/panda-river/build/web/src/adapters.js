var create, define, events, flow, go, into, isFunctionList, isProducer, pool, producer, queue, read, repeat, union, wait;
import Method from "panda-generics";
import { identity, curry, binary, compose, pipe, flip } from "panda-garden";
import { promise, follow, reject, all, isDefined, isArray, isFunction, isPromise } from "panda-parchment";
import { isIterable, isIterator, iterator } from "./iterator";
import { isReagent, isReactor, reactor } from "./reactor";
import { start, collect } from "./reducers";
({
  create,
  define
} = Method); // isProducer

isProducer = function (x) {
  return isIterator(x) || isReactor(x);
}; // producer


producer = create({
  name: "producer",
  description: "Attempts to turn its argument into an iterator or reactor."
});
define(producer, isIterable, function (x) {
  return iterator(x);
});
define(producer, isReagent, function (x) {
  return reactor(x);
});
define(producer, isProducer, identity); // repeat

repeat = function* (x) {
  while (true) {
    yield x;
  }
}; // queue


queue = function () {
  var dq, p, q;
  q = [];
  p = [];
  return {
    enqueue: function (value) {
      var resolve;

      if (p.length > 0) {
        resolve = p.shift();
        return resolve(value);
      } else {
        return q.push(value);
      }
    },
    dequeue: dq = function () {
      if (q.length > 0) {
        return follow(q.shift());
      } else {
        return promise(function (resolve) {
          return p.push(resolve);
        });
      }
    },
    idle: function () {
      return p.length === 0 && q.length === 0;
    }
  };
}; // events


events = curry(async function* (name, source) {
  var q, results;
  q = queue();

  if (source.on != null) {
    source.on(name, function (event) {
      return q.enqueue(event);
    });
  } else if (source.addEventListener != null) {
    source.addEventListener(name, function (event) {
      return q.enqueue(event);
    });
  } else {
    throw new TypeError("events: source must support `on` or `addEventListener` method");
  }

  results = [];

  while (true) {
    results.push((yield await q.dequeue()));
  }

  return results;
}); // read

read = async function* (s) {
  var data, end, q, results;
  q = queue();
  end = false;
  s.on("data", function (data) {
    return q.enqueue(data);
  });
  s.on("error", function (error) {
    return q.enqueue(reject(error));
  });
  s.on("end", function () {
    end = true;
    return q.enqueue(void 0);
  });
  results = [];

  while (true) {
    data = await q.dequeue();

    if (end) {
      break;
    } else {
      results.push((yield data));
    }
  }

  return results;
}; // union


union = async function* (...px) {
  var done, i, len, p, q, results;
  q = queue();
  done = 0;

  for (i = 0, len = px.length; i < len; i++) {
    p = px[i];

    (async function (p) {
      var x;

      for await (x of p) {
        q.enqueue(x);
      }

      return done++;
    })(p);
  }

  while (true) {
    yield await q.dequeue();

    if (done === px.length) {
      break;
    }
  }

  results = [];

  while (!q.idle()) {
    results.push((yield await q.dequeue()));
  }

  return results;
}; // flow


isFunctionList = function (...fx) {
  var f, i, len;

  for (i = 0, len = fx.length; i < len; i++) {
    f = fx[i];

    if (!isFunction(f)) {
      return false;
    }
  }

  return true;
};

flow = create({
  name: "flow",
  description: "Compose functions and a producer."
}); // check for promise

define(flow, isDefined, isArray, function (x, ax) {
  return flow(x, ...ax);
});
define(flow, isDefined, isFunctionList, function (x, ...fx) {
  return flow(x, pipe(...fx));
});
define(flow, isDefined, isFunction, function (x, f) {
  return flow(producer(x), f);
});
define(flow, isPromise, isFunction, async function (x, f) {
  return flow((await x), f);
});
define(flow, isProducer, isFunction, function (p, f) {
  return f(p);
});
define(flow, isArray, function (ax) {
  return flow(...ax);
});
go = compose(start, flow);
into = curry(binary(flip(go)));
wait = curry(async function* (filter, producer) {
  var ref, results, x;
  ref = filter(producer);
  results = [];

  for await (x of ref) {
    results.push((yield await x));
  }

  return results;
});
pool = curry(async function* (filter, producer) {
  var i, len, ref, results, x;
  ref = await all(collect(filter(producer)));
  results = [];

  for (i = 0, len = ref.length; i < len; i++) {
    x = ref[i];
    results.push((yield x));
  }

  return results;
});
export { isProducer, producer, repeat, events, read, union, flow, go, into, wait, pool };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1yaXZlci9zcmMvYWRhcHRlcnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLFVBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBO0FBQUEsT0FBQSxNQUFBLE1BQUEsZ0JBQUE7QUFDQSxTQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxRQUFBLGNBQUE7QUFDQSxTQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxTQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLFFBQUEsaUJBQUE7QUFHQSxTQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsUUFBQSxRQUFBLFlBQUE7QUFDQSxTQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsT0FBQSxRQUFBLFdBQUE7QUFDQSxTQUFBLEtBQUEsRUFBQSxPQUFBLFFBQUEsWUFBQTtBQUVBLENBQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBO0FBQUEsSUFUQSxNQVNBLEU7O0FBSUEsVUFBQSxHQUFhLFVBQUEsQ0FBQSxFQUFBO1NBQVEsVUFBQSxDQUFELENBQUMsQ0FBRCxJQUFtQixTQUFBLENBQUQsQ0FBQyxDO0FBYnZDLENBYUEsQzs7O0FBSUEsUUFBQSxHQUFXLE1BQUEsQ0FDVDtBQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUE7QUFDQSxFQUFBLFdBQUEsRUFBYTtBQURiLENBRFMsQ0FBWDtBQUlBLE1BQUEsQ0FBQSxRQUFBLEVBQUEsVUFBQSxFQUE2QixVQUFBLENBQUEsRUFBQTtTQUFPLFFBQUEsQ0FBQSxDQUFBLEM7QUFBcEMsQ0FBQSxDQUFBO0FB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QSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1ldGhvZCBmcm9tIFwicGFuZGEtZ2VuZXJpY3NcIlxuaW1wb3J0IHtpZGVudGl0eSwgY3VycnksIGJpbmFyeSwgY29tcG9zZSwgcGlwZSwgZmxpcH0gZnJvbSBcInBhbmRhLWdhcmRlblwiXG5pbXBvcnQge3Byb21pc2UsIGZvbGxvdywgcmVqZWN0LCBhbGwsXG4gIGlzRGVmaW5lZCwgaXNBcnJheSwgaXNGdW5jdGlvbiwgaXNQcm9taXNlfSBmcm9tIFwicGFuZGEtcGFyY2htZW50XCJcblxuaW1wb3J0IHtpc0l0ZXJhYmxlLCBpc0l0ZXJhdG9yLCBpdGVyYXRvcn0gZnJvbSBcIi4vaXRlcmF0b3JcIlxuaW1wb3J0IHtpc1JlYWdlbnQsIGlzUmVhY3RvciwgcmVhY3Rvcn0gZnJvbSBcIi4vcmVhY3RvclwiXG5pbXBvcnQge3N0YXJ0LCBjb2xsZWN0fSBmcm9tIFwiLi9yZWR1Y2Vyc1wiXG5cbntjcmVhdGUsIGRlZmluZX0gPSBNZXRob2RcblxuIyBpc1Byb2R1Y2VyXG5cbmlzUHJvZHVjZXIgPSAoeCkgLT4gKGlzSXRlcmF0b3IgeCkgfHwgKGlzUmVhY3RvciB4KVxuXG4jIHByb2R1Y2VyXG5cbnByb2R1Y2VyID0gY3JlYXRlXG4gIG5hbWU6IFwicHJvZHVjZXJcIlxuICBkZXNjcmlwdGlvbjogXCJBdHRlbXB0cyB0byB0dXJuIGl0cyBhcmd1bWVudCBpbnRvIGFuIGl0ZXJhdG9yIG9yIHJlYWN0b3IuXCJcblxuZGVmaW5lIHByb2R1Y2VyLCBpc0l0ZXJhYmxlLCAoeCkgLT4gaXRlcmF0b3IgeFxuZGVmaW5lIHByb2R1Y2VyLCBpc1JlYWdlbnQsICh4KSAtPiByZWFjdG9yIHhcbmRlZmluZSBwcm9kdWNlciwgaXNQcm9kdWNlciwgaWRlbnRpdHlcblxuIyByZXBlYXRcblxucmVwZWF0ID0gKHgpIC0+IGxvb3AgeWllbGQgeCA7IHJldHVyblxuXG4jIHF1ZXVlXG5cbnF1ZXVlID0gLT5cbiAgcSA9IFtdXG4gIHAgPSBbXVxuICBlbnF1ZXVlOiAodmFsdWUpIC0+XG4gICAgaWYgcC5sZW5ndGggPiAwXG4gICAgICByZXNvbHZlID0gcC5zaGlmdCgpXG4gICAgICByZXNvbHZlIHZhbHVlXG4gICAgZWxzZVxuICAgICAgcS5wdXNoIHZhbHVlXG4gIGRlcXVldWU6IGRxID0gLT5cbiAgICBpZiBxLmxlbmd0aCA+IDBcbiAgICAgIGZvbGxvdyBxLnNoaWZ0KClcbiAgICBlbHNlXG4gICAgICBwcm9taXNlIChyZXNvbHZlKSAtPiBwLnB1c2ggcmVzb2x2ZVxuICBpZGxlOiAtPiBwLmxlbmd0aCA9PSAwICYmIHEubGVuZ3RoID09IDBcblxuIyBldmVudHNcblxuZXZlbnRzID0gY3VycnkgKG5hbWUsIHNvdXJjZSkgLT5cbiAgcSA9IHF1ZXVlKClcbiAgaWYgc291cmNlLm9uP1xuICAgIHNvdXJjZS5vbiBuYW1lLCAoZXZlbnQpIC0+IHEuZW5xdWV1ZSBldmVudFxuICBlbHNlIGlmIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyP1xuICAgIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyIG5hbWUsIChldmVudCkgLT4gcS5lbnF1ZXVlIGV2ZW50XG4gIGVsc2UgdGhyb3cgbmV3IFR5cGVFcnJvciBcImV2ZW50czogc291cmNlIG11c3Qgc3VwcG9ydFxuICAgIGBvbmAgb3IgYGFkZEV2ZW50TGlzdGVuZXJgIG1ldGhvZFwiXG4gIGxvb3AgeWllbGQgYXdhaXQgcS5kZXF1ZXVlKClcblxuIyByZWFkXG5cbnJlYWQgPSAocykgLT5cbiAgcSA9IHF1ZXVlKClcbiAgZW5kID0gZmFsc2VcbiAgcy5vbiBcImRhdGFcIiwgKGRhdGEpIC0+IHEuZW5xdWV1ZSBkYXRhXG4gIHMub24gXCJlcnJvclwiLCAoZXJyb3IpIC0+IHEuZW5xdWV1ZSByZWplY3QgZXJyb3JcbiAgcy5vbiBcImVuZFwiLCAtPlxuICAgIGVuZCA9IHRydWVcbiAgICBxLmVucXVldWUgdW5kZWZpbmVkXG5cbiAgbG9vcFxuICAgIGRhdGEgPSBhd2FpdCBxLmRlcXVldWUoKVxuICAgIGlmIGVuZCB0aGVuIGJyZWFrIGVsc2UgeWllbGQgZGF0YVxuXG4jIHVuaW9uXG5cbnVuaW9uID0gKHB4Li4uKSAtPlxuICBxID0gcXVldWUoKVxuICBkb25lID0gMFxuICBmb3IgcCBpbiBweFxuICAgIGRvIChwKSAtPlxuICAgICAgcS5lbnF1ZXVlIHggZm9yIGF3YWl0IHggZnJvbSBwXG4gICAgICBkb25lKytcbiAgbG9vcFxuICAgIHlpZWxkIGF3YWl0IHEuZGVxdWV1ZSgpXG4gICAgYnJlYWsgaWYgZG9uZSA9PSBweC5sZW5ndGhcbiAgeWllbGQgYXdhaXQgcS5kZXF1ZXVlKCkgdW50aWwgcS5pZGxlKClcblxuIyBmbG93XG5cbmlzRnVuY3Rpb25MaXN0ID0gKGZ4Li4uKSAtPlxuICByZXR1cm4gZmFsc2UgZm9yIGYgaW4gZnggd2hlbiAhaXNGdW5jdGlvbiBmXG4gIHRydWVcblxuZmxvdyA9IGNyZWF0ZVxuICBuYW1lOiBcImZsb3dcIlxuICBkZXNjcmlwdGlvbjogXCJDb21wb3NlIGZ1bmN0aW9ucyBhbmQgYSBwcm9kdWNlci5cIlxuXG4jIGNoZWNrIGZvciBwcm9taXNlXG5cbmRlZmluZSBmbG93LCBpc0RlZmluZWQsIGlzQXJyYXksICh4LCBheCkgLT4gZmxvdyB4LCBheC4uLlxuZGVmaW5lIGZsb3csIGlzRGVmaW5lZCwgaXNGdW5jdGlvbkxpc3QsICh4LCBmeC4uLikgLT4gZmxvdyB4LCBwaXBlIGZ4Li4uXG5kZWZpbmUgZmxvdywgaXNEZWZpbmVkLCBpc0Z1bmN0aW9uLCAoeCwgZikgLT4gZmxvdyAocHJvZHVjZXIgeCksIGZcbmRlZmluZSBmbG93LCBpc1Byb21pc2UsIGlzRnVuY3Rpb24sICh4LCBmKSAtPiBmbG93IChhd2FpdCB4KSwgZlxuZGVmaW5lIGZsb3csIGlzUHJvZHVjZXIsIGlzRnVuY3Rpb24sIChwLCBmKSAtPiBmIHBcbmRlZmluZSBmbG93LCBpc0FycmF5LCAoYXgpIC0+IGZsb3cgYXguLi5cblxuZ28gPSBjb21wb3NlIHN0YXJ0LCBmbG93XG5cbmludG8gPSBjdXJyeSBiaW5hcnkgZmxpcCBnb1xuXG53YWl0ID0gY3VycnkgKGZpbHRlciwgcHJvZHVjZXIpIC0+XG4gIHlpZWxkIGF3YWl0IHggZm9yIGF3YWl0IHggZnJvbSBmaWx0ZXIgcHJvZHVjZXJcblxucG9vbCA9IGN1cnJ5IChmaWx0ZXIsIHByb2R1Y2VyKSAtPlxuICB5aWVsZCB4IGZvciB4IGluIGF3YWl0IGFsbCBjb2xsZWN0IGZpbHRlciBwcm9kdWNlclxuXG5leHBvcnQge2lzUHJvZHVjZXIsIHByb2R1Y2VyLCByZXBlYXQsXG4gIGV2ZW50cywgcmVhZCwgdW5pb24sXG4gIGZsb3csIGdvLCBpbnRvLCB3YWl0LCBwb29sfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/panda-river/src/adapters.coffee