var accumulate,
    compact,
    debounce,
    define,
    filter,
    isAny,
    limit,
    lines,
    map,
    partition,
    pour,
    project,
    reject,
    select,
    take,
    tee,
    throttle,
    splice = [].splice;
import { isFunction, isDefined, isNumber, property } from "panda-parchment";
import { curry, binary, ternary, negate, tee as _tee } from "panda-garden";
import Method from "panda-generics";
import { isIterator } from "./iterator";
import { isReactor } from "./reactor";
import { producer } from "./adapters";

isAny = function (x) {
  return true;
};

define = function ({
  name,
  description,
  terms,
  iterator,
  reactor
}) {
  var f;
  f = Method.create({
    name: name,
    description: description,
    default: function (...args) {
      var last, ref;
      ref = args, [...args] = ref, [last] = splice.call(args, -1);

      if (args.length === terms.length) {
        return f(...args, producer(last));
      } else {
        throw `${name}: wrong number of arguments`;
      }
    }
  });
  Method.define(f, ...terms, isIterator, iterator);
  Method.define(f, ...terms, isReactor, reactor);
  return f;
}; // map


map = curry(binary(define({
  name: "map",
  description: "Apply a transformation function to an iterator's products.",
  terms: [isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield f(x)));
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      results.push((yield f(x)));
    }

    return results;
  }
}))); // project

project = curry(function (p, i) {
  return map(property(p), i);
}); // accumulate

accumulate = curry(ternary(define({
  name: "accumulate",
  description: "Apply a transformation function to an iterator's products, producing an accumulated result.",
  terms: [isFunction, isAny],
  iterator: function* (f, k, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield k = f(k, x)));
    }

    return results;
  },
  reactor: async function* (f, k, r) {
    var results, x;
    results = [];

    for await (x of r) {
      results.push((yield k = f(k, x)));
    }

    return results;
  }
}))); // select

select = filter = curry(binary(define({
  name: "select",
  description: "Apply a filtering function to products of an iterator.",
  terms: [isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      if (f(x)) {
        results.push((yield x));
      }
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      if (f(x)) {
        results.push((yield x));
      }
    }

    return results;
  }
}))); // reject

reject = curry(function (f, i) {
  return select(negate(f), i);
}); // compact

compact = select(isDefined); // tee

tee = curry(binary(define({
  name: "tee",
  description: "Apply a function to an iterator's products, returning them.",
  terms: [isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield _tee(f)(x)));
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      results.push((yield _tee(f)(x)));
    }

    return results;
  }
}))); // partition

partition = curry(binary(define({
  name: "partition",
  description: "Batches an interator's products in groups of N.",
  terms: [isNumber],
  iterator: function* (n, i) {
    var batch, x;
    batch = [];

    for (x of i) {
      batch.push(x);

      if (batch.length === n) {
        yield batch;
        batch = [];
      }
    }

    if (batch.length > 0) {
      return yield batch;
    }
  },
  reactor: async function* (n, r) {
    var batch, x;
    batch = [];

    for await (x of r) {
      batch.push(x);

      if (batch.length === n) {
        yield batch;
        batch = [];
      }
    }

    if (batch.length > 0) {
      return yield batch;
    }
  }
}))); // take

take = curry(binary(define({
  name: "take",
  description: "Apply a function to each product until it returns false.",
  terms: [isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      if (f(x)) {
        results.push((yield x));
      } else {
        break;
      }
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      if (f(x)) {
        results.push((yield x));
      } else {
        break;
      }
    }

    return results;
  }
}))); // limit

limit = function () {
  var f;

  f = function (n, i = 0) {
    return function () {
      return i++ < n;
    };
  };

  return function (n, i) {
    return take(f(n), i);
  };
}(); // pour
// TODO: generalize beyond strings
// possibly with a 2nd “combine” function?


pour = curry(binary(define({
  name: "pour",
  description: "Transforms the unit of iteration, ex: from blocks to lines.",
  terms: [isFunction],
  iterator: function* (f, i) {
    var first, j, last, len, line, lines, ref, remainder, x;
    remainder = "";

    for (x of i) {
      ref = f(x), [first, ...lines] = ref, [last] = splice.call(lines, -1);
      yield remainder + first;
      remainder = last;

      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        yield line;
      }
    }

    if (remainder !== "") {
      return yield remainder;
    }
  },
  reactor: async function* (f, r) {
    var first, j, last, len, line, lines, ref, remainder, x;
    remainder = "";

    for await (x of r) {
      ref = f(x), [first, ...lines] = ref, [last] = splice.call(lines, -1);
      yield remainder + first;
      remainder = last;

      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        yield line;
      }
    }

    if (remainder !== "") {
      return yield remainder;
    }
  }
}))); // lines

lines = pour(function (s) {
  return s.toString().split("\n");
}); // throttle

throttle = debounce = curry(async function* (interval, r) {
  var last, results, x;
  last = 0;
  results = [];

  for await (x of r) {
    if (Date.now() - last >= interval) {
      results.push((yield x));
    } else {
      results.push(void 0);
    }
  }

  return results;
});
export { map, project, accumulate, select, filter, reject, compact, tee, partition, take, limit, lines, throttle };
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-river/src/filters.coffee