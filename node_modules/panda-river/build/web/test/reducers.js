var spec;
import assert from "assert";
import { test } from "amen";
import { identity } from "panda-garden";
import { first, add, odd, push, w } from "panda-parchment";
import { reduce, fold, foldr, collect, each, start, any, all, sum, average, delimit } from "../src/reducers";

spec = function (name, {
  expected,
  reducer,
  iterable
}) {
  return test(name, [test("iterator", function () {
    return assert.deepEqual(expected, reducer(iterable));
  }), test("reactor", async function () {
    var r;

    r = async function* () {
      var results, x;
      results = [];

      for await (x of iterable) {
        results.push((yield x));
      }

      return results;
    };

    return assert.deepEqual(expected, (await reducer(r)));
  })]);
};

export default [spec("collect", {
  iterable: [1, 2, 3, 4, 5],
  expected: [1, 2, 3, 4, 5],
  reducer: collect
}), spec("each", {
  iterable: [1, 2, 3, 4, 5],
  expected: void 0,
  reducer: each(function (y) {
    return function (x) {
      assert(x === y);
      return y = y % 5 + 1;
    };
  }(1))
}), spec("fold/reduce", {
  iterable: [1, 2, 3, 4, 5],
  expected: 15,
  reducer: fold(add, 0)
}), spec("foldr/reduceRight", {
  iterable: "panama",
  expected: "amanap",
  reducer: foldr(add, "")
}), spec("any", {
  iterable: [1, 2, 3, 4, 5],
  expected: true,
  reducer: any(odd)
}), spec("all", {
  iterable: [1, 2, 3, 4, 5],
  expected: false,
  reducer: all(odd)
}), spec("sum", {
  iterable: [1, 2, 3, 4, 5],
  expected: 15,
  reducer: sum
}), spec("average", {
  iterable: [1, 2, 3, 4, 5],
  expected: 3,
  reducer: average
}), spec("delimit", {
  iterable: ["one", "two", "three"],
  expected: "one, two, three",
  reducer: delimit(", ")
})];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1yaXZlci90ZXN0L3JlZHVjZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLElBQUE7QUFBQSxPQUFBLE1BQUEsTUFBQSxRQUFBO0FBQ0EsU0FBQSxJQUFBLFFBQUEsTUFBQTtBQUVBLFNBQUEsUUFBQSxRQUFBLGNBQUE7QUFDQSxTQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLFFBQUEsaUJBQUE7QUFFQSxTQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLFFBQUEsaUJBQUE7O0FBR0EsSUFBQSxHQUFPLFVBQUEsSUFBQSxFQUFPO0FBQUEsRUFBQSxRQUFBO0FBQUEsRUFBQSxPQUFBO0FBQVAsRUFBQTtBQUFPLENBQVAsRUFBQTtTQUVMLElBQUEsQ0FBQSxJQUFBLEVBQVcsQ0FDVCxJQUFBLENBQUEsVUFBQSxFQUFpQixZQUFBO1dBQ2YsTUFBTSxDQUFOLFNBQUEsQ0FBQSxRQUFBLEVBQTJCLE9BQUEsQ0FBM0IsUUFBMkIsQ0FBM0IsQztBQUZPLEdBQ1QsQ0FEUyxFQUlULElBQUEsQ0FBQSxTQUFBLEVBQWdCLGtCQUFBO0FBQ2QsUUFBQSxDQUFBOztBQUFBLElBQUEsQ0FBQSxHQUFJLG1CQUFBO0FBQUcsVUFBQSxPQUFBLEVBQUEsQ0FBQTtBQUFRLE1BQUEsT0FBQSxHQUFBLEVBQUE7O0FBQUEsaUJBQUEsQ0FBQSxJQUFBLFFBQUEsRUFBQTtnQkFBUixJLEVBQUEsTUFBQSxDO0FBQVE7OztBQUFYLEtBQUo7O1dBQ0EsTUFBTSxDQUFOLFNBQUEsQ0FBQSxRQUFBLEdBQTJCLE1BQU0sT0FBQSxDQUFqQyxDQUFpQyxDQUFqQyxFO0FBTk8sR0FJVCxDQUpTLENBQVgsQztBQUZLLENBQVA7O0FBV0EsZUFBZSxDQUViLElBQUEsQ0FBQSxTQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFEVixDQUNVLENBRFY7QUFFQSxFQUFBLE9BQUEsRUFBUztBQUZULENBREYsQ0FGYSxFQU9iLElBQUEsQ0FBQSxNQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFBVSxLQURWLENBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUyxJQUFBLENBQVEsVUFBQSxDQUFBLEVBQUE7V0FDZixVQUFBLENBQUEsRUFBQTtBQUNFLE1BQUEsTUFBQSxDQUFPLENBQUEsS0FBUCxDQUFBLENBQUE7YUFDQSxDQUFBLEdBQUssQ0FBQSxHQUFELENBQUEsR0FBVSxDO0FBRmhCLEs7QUFEWSxHQUFHLENBQVIsQ0FBUSxDQUFSO0FBRlQsQ0FERixDQVBhLEVBZWIsSUFBQSxDQUFBLGFBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQURBLEVBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUyxJQUFBLENBQUEsR0FBQSxFQUFBLENBQUE7QUFGVCxDQURGLENBZmEsRUFvQmIsSUFBQSxDQUFBLG1CQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBO0FBQ0EsRUFBQSxRQUFBLEVBREEsUUFBQTtBQUVBLEVBQUEsT0FBQSxFQUFTLEtBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQTtBQUZULENBREYsQ0FwQmEsRUF5QmIsSUFBQSxDQUFBLEtBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQURBLElBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUyxHQUFBLENBQUEsR0FBQTtBQUZULENBREYsQ0F6QmEsRUE4QmIsSUFBQSxDQUFBLEtBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQURBLEtBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUyxHQUFBLENBQUEsR0FBQTtBQUZULENBREYsQ0E5QmEsRUFtQ2IsSUFBQSxDQUFBLEtBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQURBLEVBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUztBQUZULENBREYsQ0FuQ2EsRUF3Q2IsSUFBQSxDQUFBLFNBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQURBLENBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUztBQUZULENBREYsQ0F4Q2EsRUE2Q2IsSUFBQSxDQUFBLFNBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBVixPQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFEQSxpQkFBQTtBQUVBLEVBQUEsT0FBQSxFQUFTLE9BQUEsQ0FBQSxJQUFBO0FBRlQsQ0FERixDQTdDYSxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCJcbmltcG9ydCB7dGVzdH0gZnJvbSBcImFtZW5cIlxuXG5pbXBvcnQge2lkZW50aXR5fSBmcm9tIFwicGFuZGEtZ2FyZGVuXCJcbmltcG9ydCB7Zmlyc3QsIGFkZCwgb2RkLCBwdXNoLCB3fSBmcm9tIFwicGFuZGEtcGFyY2htZW50XCJcblxuaW1wb3J0IHtyZWR1Y2UsIGZvbGQsIGZvbGRyLCBjb2xsZWN0LCBlYWNoLCBzdGFydCwgYW55LCBhbGwsXG4gIHN1bSwgYXZlcmFnZSwgZGVsaW1pdH0gZnJvbSBcIi4uL3NyYy9yZWR1Y2Vyc1wiXG5cbnNwZWMgPSAobmFtZSwge2V4cGVjdGVkLCByZWR1Y2VyLCBpdGVyYWJsZX0pIC0+XG5cbiAgdGVzdCBuYW1lLCBbXG4gICAgdGVzdCBcIml0ZXJhdG9yXCIsIC0+XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIGV4cGVjdGVkLCByZWR1Y2VyIGl0ZXJhYmxlXG5cbiAgICB0ZXN0IFwicmVhY3RvclwiLCAtPlxuICAgICAgciA9IC0+IHlpZWxkIHggZm9yIGF3YWl0IHggZnJvbSBpdGVyYWJsZVxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgYXdhaXQgcmVkdWNlciByXG4gIF1cblxuZXhwb3J0IGRlZmF1bHQgW1xuXG4gIHNwZWMgXCJjb2xsZWN0XCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiBbMS4uNV1cbiAgICByZWR1Y2VyOiBjb2xsZWN0XG5cbiAgc3BlYyBcImVhY2hcIixcbiAgICBpdGVyYWJsZTogWzEuLjVdXG4gICAgZXhwZWN0ZWQ6IHVuZGVmaW5lZFxuICAgIHJlZHVjZXI6IGVhY2ggZG8gKHk9MSkgLT5cbiAgICAgICh4KSAtPlxuICAgICAgICBhc3NlcnQgeCA9PSB5XG4gICAgICAgIHkgPSAoeSAlIDUpICsgMVxuXG4gIHNwZWMgXCJmb2xkL3JlZHVjZVwiLFxuICAgIGl0ZXJhYmxlOiBbMS4uNV1cbiAgICBleHBlY3RlZDogMTVcbiAgICByZWR1Y2VyOiBmb2xkIGFkZCwgMFxuXG4gIHNwZWMgXCJmb2xkci9yZWR1Y2VSaWdodFwiLFxuICAgIGl0ZXJhYmxlOiBcInBhbmFtYVwiXG4gICAgZXhwZWN0ZWQ6IFwiYW1hbmFwXCJcbiAgICByZWR1Y2VyOiBmb2xkciBhZGQsIFwiXCJcblxuICBzcGVjIFwiYW55XCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiB0cnVlXG4gICAgcmVkdWNlcjogYW55IG9kZFxuXG4gIHNwZWMgXCJhbGxcIixcbiAgICBpdGVyYWJsZTogWzEuLjVdXG4gICAgZXhwZWN0ZWQ6IGZhbHNlXG4gICAgcmVkdWNlcjogYWxsIG9kZFxuXG4gIHNwZWMgXCJzdW1cIixcbiAgICBpdGVyYWJsZTogWzEuLjVdXG4gICAgZXhwZWN0ZWQ6IDE1XG4gICAgcmVkdWNlcjogc3VtXG5cbiAgc3BlYyBcImF2ZXJhZ2VcIixcbiAgICBpdGVyYWJsZTogWzEuLjVdXG4gICAgZXhwZWN0ZWQ6IDNcbiAgICByZWR1Y2VyOiBhdmVyYWdlXG5cbiAgc3BlYyBcImRlbGltaXRcIixcbiAgICBpdGVyYWJsZTogWyBcIm9uZVwiLCBcInR3b1wiLCBcInRocmVlXCIgXVxuICAgIGV4cGVjdGVkOiBcIm9uZSwgdHdvLCB0aHJlZVwiXG4gICAgcmVkdWNlcjogZGVsaW1pdCBcIiwgXCJcbl1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/panda-river/test/reducers.coffee