var Amen, EventEmitter, accumulate, assert, combine, createReadStream, events, flow, go, lines, map, next, stream;
({
  createReadStream
} = require("fs"));
({
  EventEmitter
} = require("events"));
assert = require("assert");
Amen = require("amen");
({
  next
} = require("../src/iterator"));
({
  go
} = require("../src/helpers"));
({
  map,
  accumulate,
  lines
} = require("../src/filters"));
({
  flow,
  events,
  stream,
  combine
} = require("../src/adapters"));
Amen.describe("Helpers", function (context) {
  context.test("go", function* () {
    var _lines;

    _lines = [];
    yield go([stream(createReadStream("./test/data/lines.txt")), lines, map(function (line) {
      return _lines.push(line);
    })]);
    assert(_lines.length === 3);
    assert(_lines[0] === "one");
    assert(_lines[1] === "two");
    return assert(_lines[2] === "three");
  });
  return context.test("combine/accumulate example", function* () {
    var click, i, j, k;
    click = {
      increment: new EventEmitter(),
      decrement: new EventEmitter()
    };
    i = flow([events("change", click.increment), map(function () {
      return 1;
    })]);
    j = flow([events("change", click.decrement), map(function () {
      return -1;
    })]);
    k = flow([combine(i, j), accumulate(function (a, b) {
      return a + b;
    }, 0)]); // inc, dec

    click.increment.emit("change");
    assert((yield next(k)).value === 1);
    click.decrement.emit("change");
    assert((yield next(k)).value === 0);
    click.increment.emit("change");
    assert((yield next(k)).value === 1);
    click.increment.emit("change");
    assert((yield next(k)).value === 2);
    click.decrement.emit("change");
    return assert((yield next(k)).value === 1);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1yaXZlci90ZXN0L2hlbHBlcnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxnQkFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUE7QUFBQSxDQUFBO0FBQUEsRUFBQTtBQUFBLElBQXFCLE9BQUEsQ0FBckIsSUFBcUIsQ0FBckI7QUFDQSxDQUFBO0FBQUEsRUFBQTtBQUFBLElBQWlCLE9BQUEsQ0FBakIsUUFBaUIsQ0FBakI7QUFFQSxNQUFBLEdBQVMsT0FBQSxDQUFBLFFBQUEsQ0FBVDtBQUNBLElBQUEsR0FBTyxPQUFBLENBQUEsTUFBQSxDQUFQO0FBRUEsQ0FBQTtBQUFBLEVBQUE7QUFBQSxJQUFTLE9BQUEsQ0FBVCxpQkFBUyxDQUFUO0FBQ0EsQ0FBQTtBQUFBLEVBQUE7QUFBQSxJQUFPLE9BQUEsQ0FBUCxnQkFBTyxDQUFQO0FBQ0EsQ0FBQTtBQUFBLEVBQUEsR0FBQTtBQUFBLEVBQUEsVUFBQTtBQUFBLEVBQUE7QUFBQSxJQUEyQixPQUFBLENBQTNCLGdCQUEyQixDQUEzQjtBQUNBLENBQUE7QUFBQSxFQUFBLElBQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBO0FBQUEsSUFBa0MsT0FBQSxDQUFsQyxpQkFBa0MsQ0FBbEM7QUFFQSxJQUFJLENBQUosUUFBQSxDQUFBLFNBQUEsRUFBeUIsVUFBQSxPQUFBLEVBQUE7QUFFdkIsRUFBQSxPQUFPLENBQVAsSUFBQSxDQUFBLElBQUEsRUFBbUIsYUFBQTtBQUVqQixRQUFBLE1BQUE7O0FBQUEsSUFBQSxNQUFBLEdBQVMsRUFBVDtBQUVBLFVBQU0sRUFBQSxDQUFHLENBQ1AsTUFBQSxDQUFPLGdCQUFBLENBREEsdUJBQ0EsQ0FBUCxDQURPLEVBQUEsS0FBQSxFQUdQLEdBQUEsQ0FBSSxVQUFBLElBQUEsRUFBQTthQUFVLE1BQU0sQ0FBTixJQUFBLENBQUEsSUFBQSxDO0FBSFAsS0FHUCxDQUhPLENBQUgsQ0FBTjtBQU1BLElBQUEsTUFBQSxDQUFPLE1BQU0sQ0FBTixNQUFBLEtBQVAsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxNQUFBLENBQU8sTUFBTyxDQUFQLENBQU8sQ0FBUCxLQUFQLEtBQUEsQ0FBQTtBQUNBLElBQUEsTUFBQSxDQUFPLE1BQU8sQ0FBUCxDQUFPLENBQVAsS0FBUCxLQUFBLENBQUE7V0FDQSxNQUFBLENBQU8sTUFBTyxDQUFQLENBQU8sQ0FBUCxLQUFQLE9BQUEsQztBQWJGLEdBQUE7U0FlQSxPQUFPLENBQVAsSUFBQSxDQUFBLDRCQUFBLEVBQTJDLGFBQUE7QUFDekMsUUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsSUFBQSxLQUFBLEdBQ0U7QUFBQSxNQUFBLFNBQUEsRUFBVyxJQUFYLFlBQVcsRUFBWDtBQUNBLE1BQUEsU0FBQSxFQUFXLElBQUksWUFBSjtBQURYLEtBREY7QUFJQSxJQUFBLENBQUEsR0FBSSxJQUFBLENBQUssQ0FDUCxNQUFBLENBQUEsUUFBQSxFQUFpQixLQUFLLENBRGYsU0FDUCxDQURPLEVBRVAsR0FBQSxDQUFJLFlBQUE7YUFBRyxDO0FBRkEsS0FFUCxDQUZPLENBQUwsQ0FBSjtBQUtBLElBQUEsQ0FBQSxHQUFJLElBQUEsQ0FBSyxDQUNQLE1BQUEsQ0FBQSxRQUFBLEVBQWlCLEtBQUssQ0FEZixTQUNQLENBRE8sRUFFUCxHQUFBLENBQUksWUFBQTthQUFHLENBQUMsQztBQUZELEtBRVAsQ0FGTyxDQUFMLENBQUo7QUFLQSxJQUFBLENBQUEsR0FBSSxJQUFBLENBQUssQ0FDUCxPQUFBLENBQUEsQ0FBQSxFQURPLENBQ1AsQ0FETyxFQUVQLFVBQUEsQ0FBWSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7YUFBVSxDQUFBLEdBQUksQztBQUExQixLQUFBLEVBRk8sQ0FFUCxDQUZPLENBQUwsQ0FBSixDQWZ5QyxDOztBQXFCekMsSUFBQSxLQUFLLENBQUMsU0FBTixDQUFBLElBQUEsQ0FBQSxRQUFBO0FBQ0EsSUFBQSxNQUFBLENBQU8sQ0FBQyxNQUFNLElBQUEsQ0FBUCxDQUFPLENBQVAsRUFBQSxLQUFBLEtBQVAsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxLQUFLLENBQUMsU0FBTixDQUFBLElBQUEsQ0FBQSxRQUFBO0FBQ0EsSUFBQSxNQUFBLENBQU8sQ0FBQyxNQUFNLElBQUEsQ0FBUCxDQUFPLENBQVAsRUFBQSxLQUFBLEtBQVAsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxLQUFLLENBQUMsU0FBTixDQUFBLElBQUEsQ0FBQSxRQUFBO0FBQ0EsSUFBQSxNQUFBLENBQU8sQ0FBQyxNQUFNLElBQUEsQ0FBUCxDQUFPLENBQVAsRUFBQSxLQUFBLEtBQVAsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxLQUFLLENBQUMsU0FBTixDQUFBLElBQUEsQ0FBQSxRQUFBO0FBQ0EsSUFBQSxNQUFBLENBQU8sQ0FBQyxNQUFNLElBQUEsQ0FBUCxDQUFPLENBQVAsRUFBQSxLQUFBLEtBQVAsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxLQUFLLENBQUMsU0FBTixDQUFBLElBQUEsQ0FBQSxRQUFBO1dBQ0EsTUFBQSxDQUFPLENBQUMsTUFBTSxJQUFBLENBQVAsQ0FBTyxDQUFQLEVBQUEsS0FBQSxLQUFQLENBQUEsQztBQTlCRixHQUFBLEM7QUFqQkYsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIntjcmVhdGVSZWFkU3RyZWFtfSA9IHJlcXVpcmUgXCJmc1wiXG57RXZlbnRFbWl0dGVyfSA9IHJlcXVpcmUgXCJldmVudHNcIlxuXG5hc3NlcnQgPSByZXF1aXJlIFwiYXNzZXJ0XCJcbkFtZW4gPSByZXF1aXJlIFwiYW1lblwiXG5cbntuZXh0fSA9IHJlcXVpcmUgXCIuLi9zcmMvaXRlcmF0b3JcIlxue2dvfSA9IHJlcXVpcmUgXCIuLi9zcmMvaGVscGVyc1wiXG57bWFwLCBhY2N1bXVsYXRlLCBsaW5lc30gPSByZXF1aXJlIFwiLi4vc3JjL2ZpbHRlcnNcIlxue2Zsb3csIGV2ZW50cywgc3RyZWFtLCBjb21iaW5lfSA9IHJlcXVpcmUgXCIuLi9zcmMvYWRhcHRlcnNcIlxuXG5BbWVuLmRlc2NyaWJlIFwiSGVscGVyc1wiLCAoY29udGV4dCkgLT5cblxuICBjb250ZXh0LnRlc3QgXCJnb1wiLCAtPlxuXG4gICAgX2xpbmVzID0gW11cblxuICAgIHlpZWxkIGdvIFtcbiAgICAgIHN0cmVhbSBjcmVhdGVSZWFkU3RyZWFtIFwiLi90ZXN0L2RhdGEvbGluZXMudHh0XCJcbiAgICAgIGxpbmVzXG4gICAgICBtYXAgKGxpbmUpIC0+IF9saW5lcy5wdXNoIGxpbmVcbiAgICBdXG5cbiAgICBhc3NlcnQgX2xpbmVzLmxlbmd0aCA9PSAzXG4gICAgYXNzZXJ0IF9saW5lc1swXSA9PSBcIm9uZVwiXG4gICAgYXNzZXJ0IF9saW5lc1sxXSA9PSBcInR3b1wiXG4gICAgYXNzZXJ0IF9saW5lc1syXSA9PSBcInRocmVlXCJcblxuICBjb250ZXh0LnRlc3QgXCJjb21iaW5lL2FjY3VtdWxhdGUgZXhhbXBsZVwiLCAtPlxuICAgIGNsaWNrID1cbiAgICAgIGluY3JlbWVudDogbmV3IEV2ZW50RW1pdHRlclxuICAgICAgZGVjcmVtZW50OiBuZXcgRXZlbnRFbWl0dGVyXG5cbiAgICBpID0gZmxvdyBbXG4gICAgICBldmVudHMgXCJjaGFuZ2VcIiwgY2xpY2suaW5jcmVtZW50XG4gICAgICBtYXAgLT4gMVxuICAgIF1cblxuICAgIGogPSBmbG93IFtcbiAgICAgIGV2ZW50cyBcImNoYW5nZVwiLCBjbGljay5kZWNyZW1lbnRcbiAgICAgIG1hcCAtPiAtMVxuICAgIF1cblxuICAgIGsgPSBmbG93IFtcbiAgICAgIGNvbWJpbmUgaSwgalxuICAgICAgYWNjdW11bGF0ZSAoKGEsIGIpIC0+IGEgKyBiKSwgMFxuICAgIF1cblxuICAgICMgaW5jLCBkZWNcbiAgICBjbGljay5pbmNyZW1lbnQuZW1pdCBcImNoYW5nZVwiXG4gICAgYXNzZXJ0ICh5aWVsZCBuZXh0IGspLnZhbHVlID09IDFcbiAgICBjbGljay5kZWNyZW1lbnQuZW1pdCBcImNoYW5nZVwiXG4gICAgYXNzZXJ0ICh5aWVsZCBuZXh0IGspLnZhbHVlID09IDBcbiAgICBjbGljay5pbmNyZW1lbnQuZW1pdCBcImNoYW5nZVwiXG4gICAgYXNzZXJ0ICh5aWVsZCBuZXh0IGspLnZhbHVlID09IDFcbiAgICBjbGljay5pbmNyZW1lbnQuZW1pdCBcImNoYW5nZVwiXG4gICAgYXNzZXJ0ICh5aWVsZCBuZXh0IGspLnZhbHVlID09IDJcbiAgICBjbGljay5kZWNyZW1lbnQuZW1pdCBcImNoYW5nZVwiXG4gICAgYXNzZXJ0ICh5aWVsZCBuZXh0IGspLnZhbHVlID09IDFcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/panda-river/test/helpers.coffee