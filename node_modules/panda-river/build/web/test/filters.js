var add, assert, follow, merge, odd, spec, square;
import { test } from "amen";
assert = require("assert");
import { map, project, accumulate, select, filter, reject, compact, tee, partition, take, limit, lines, throttle } from "../src/filters";
({
  odd,
  merge,
  follow
} = require("panda-parchment")); // we need to do things with the values

square = function (x) {
  return x * x;
};

add = function (x, y) {
  return x + y;
};

spec = function (name, {
  expected,
  filter,
  iterable
}) {
  return test(name, [test("iterator", function () {
    var x;
    return assert.deepEqual(expected, function () {
      var ref, results;
      ref = filter(iterable);
      results = [];

      for (x of ref) {
        results.push(x);
      }

      return results;
    }());
  }), test("reactor", async function () {
    var r, x;

    r = async function* () {
      var results, x;
      results = [];

      for await (x of iterable) {
        results.push((yield x));
      }

      return results;
    };

    return assert.deepEqual(expected, (await async function () {
      var ref, results;
      ref = filter(r);
      results = [];

      for await (x of ref) {
        results.push(x);
      }

      return results;
    }()));
  })]);
};

export default [spec("map", {
  expected: [1, 4, 9, 16],
  filter: map(square),
  iterable: [1, 2, 3, 4]
}), spec("accumulate", {
  expected: [1, 3, 6, 10],
  filter: accumulate(add, 0),
  iterable: [1, 2, 3, 4]
}), spec("select", {
  expected: [1, 3, 5],
  filter: select(odd),
  iterable: [1, 2, 3, 4, 5]
}), spec("tee", {
  expected: [1, 2, 3, 4],
  filter: tee(square),
  iterable: [1, 2, 3, 4]
}), spec("partition", {
  expected: [[1, 2], [3, 4]],
  filter: partition(2),
  iterable: [1, 2, 3, 4]
}), spec("take", {
  expected: [1, 2, 3],
  filter: take(function (x) {
    return x <= 3;
  }),
  iterable: [1, 2, 3, 4]
}), test("throttle"), spec("lines", {
  expected: ["one", "two", "three"],
  filter: lines,
  iterable: ["one\ntwo", "\nthree"]
})];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1yaXZlci90ZXN0L2ZpbHRlcnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQTtBQUFBLFNBQUEsSUFBQSxRQUFBLE1BQUE7QUFDQSxNQUFBLEdBQVMsT0FBQSxDQUFBLFFBQUEsQ0FBVDtBQUVBLFNBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxRQUFBLGdCQUFBO0FBR0EsQ0FBQTtBQUFBLEVBQUEsR0FBQTtBQUFBLEVBQUEsS0FBQTtBQUFBLEVBQUE7QUFBQSxJQUF1QixPQUFBLENBTnZCLGlCQU11QixDQUF2QixFOztBQUdBLE1BQUEsR0FBUyxVQUFBLENBQUEsRUFBQTtTQUFPLENBQUEsR0FBSSxDO0FBQVgsQ0FBVDs7QUFDQSxHQUFBLEdBQU0sVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO1NBQVUsQ0FBQSxHQUFJLEM7QUFBZCxDQUFOOztBQUVBLElBQUEsR0FBTyxVQUFBLElBQUEsRUFBTztBQUFBLEVBQUEsUUFBQTtBQUFBLEVBQUEsTUFBQTtBQUFQLEVBQUE7QUFBTyxDQUFQLEVBQUE7U0FFTCxJQUFBLENBQUEsSUFBQSxFQUFXLENBQ1QsSUFBQSxDQUFBLFVBQUEsRUFBaUIsWUFBQTtBQUNmLFFBQUEsQ0FBQTtXQUFBLE1BQU0sQ0FBTixTQUFBLENBQUEsUUFBQSxFOztBQUNLLE1BQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxRQUFBLENBQUE7QUFBQSxNQUFBLE9BQUEsR0FBQSxFQUFBOztBQUFBLFdBQUEsQ0FBQSxJQUFBLEdBQUEsRUFBQTtxQkFBRixDO0FBQUU7OztBQURM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QUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBVixPQUFVLENBQVY7QUFDQSxFQUFBLE1BQUEsRUFEQSxLQUFBO0FBRUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxVQUFBLEVBQUEsU0FBQTtBQUZWLENBREYsQ0FsQ2EsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dGVzdH0gZnJvbSBcImFtZW5cIlxuYXNzZXJ0ID0gcmVxdWlyZSBcImFzc2VydFwiXG5cbmltcG9ydCB7bWFwLCBwcm9qZWN0LCBhY2N1bXVsYXRlLCBzZWxlY3QsIGZpbHRlciwgcmVqZWN0LCBjb21wYWN0LFxuICB0ZWUsIHBhcnRpdGlvbiwgdGFrZSwgbGltaXQsIGxpbmVzLCB0aHJvdHRsZX0gZnJvbSBcIi4uL3NyYy9maWx0ZXJzXCJcblxue29kZCwgbWVyZ2UsIGZvbGxvd30gPSByZXF1aXJlIFwicGFuZGEtcGFyY2htZW50XCJcblxuIyB3ZSBuZWVkIHRvIGRvIHRoaW5ncyB3aXRoIHRoZSB2YWx1ZXNcbnNxdWFyZSA9ICh4KSAtPiB4ICogeFxuYWRkID0gKHgsIHkpIC0+IHggKyB5XG5cbnNwZWMgPSAobmFtZSwge2V4cGVjdGVkLCBmaWx0ZXIsIGl0ZXJhYmxlfSkgLT5cblxuICB0ZXN0IG5hbWUsIFtcbiAgICB0ZXN0IFwiaXRlcmF0b3JcIiwgLT5cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsXG4gICAgICAgICh4IGZvciB4IGZyb20gZmlsdGVyIGl0ZXJhYmxlKVxuXG4gICAgdGVzdCBcInJlYWN0b3JcIiwgLT5cbiAgICAgIHIgPSAtPiB5aWVsZCB4IGZvciBhd2FpdCB4IGZyb20gaXRlcmFibGVcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsXG4gICAgICAgICh4IGZvciBhd2FpdCB4IGZyb20gZmlsdGVyIHIpXG4gIF1cblxuZXhwb3J0IGRlZmF1bHQgW1xuXG4gIHNwZWMgXCJtYXBcIixcbiAgICBleHBlY3RlZDogWzEsIDQsIDksIDE2XVxuICAgIGZpbHRlcjogbWFwIHNxdWFyZVxuICAgIGl0ZXJhYmxlOiBbMS4uNF1cblxuICBzcGVjIFwiYWNjdW11bGF0ZVwiLFxuICAgIGV4cGVjdGVkOiBbMSwgMywgNiwgMTBdXG4gICAgZmlsdGVyOiBhY2N1bXVsYXRlIGFkZCwgMFxuICAgIGl0ZXJhYmxlOiBbMS4uNF1cblxuICBzcGVjIFwic2VsZWN0XCIsXG4gICAgZXhwZWN0ZWQ6IFsxLCAzLCA1XVxuICAgIGZpbHRlcjogc2VsZWN0IG9kZFxuICAgIGl0ZXJhYmxlOiBbMS4uNV1cblxuICBzcGVjIFwidGVlXCIsXG4gICAgZXhwZWN0ZWQ6IFsxLi40XVxuICAgIGZpbHRlcjogdGVlIHNxdWFyZVxuICAgIGl0ZXJhYmxlOiBbMS4uNF1cblxuICBzcGVjIFwicGFydGl0aW9uXCIsXG4gICAgZXhwZWN0ZWQ6IFtbMSwgMl0sIFszLCA0XV1cbiAgICBmaWx0ZXI6IHBhcnRpdGlvbiAyXG4gICAgaXRlcmFibGU6IFsxLi40XVxuXG4gIHNwZWMgXCJ0YWtlXCIsXG4gICAgZXhwZWN0ZWQ6IFsxLi4zXVxuICAgIGZpbHRlcjogdGFrZSAoeCkgLT4geCA8PSAzXG4gICAgaXRlcmFibGU6IFsxLi40XVxuXG4gIHRlc3QgXCJ0aHJvdHRsZVwiXG5cbiAgc3BlYyBcImxpbmVzXCIsXG4gICAgZXhwZWN0ZWQ6IFsgXCJvbmVcIiwgXCJ0d29cIiwgXCJ0aHJlZVwiIF1cbiAgICBmaWx0ZXI6IGxpbmVzXG4gICAgaXRlcmFibGU6IFsgXCJvbmVcXG50d29cIiwgXCJcXG50aHJlZVwiIF1cblxuXVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/panda-river/test/filters.coffee