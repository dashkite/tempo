"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttle = exports.lines = exports.limit = exports.take = exports.partition = exports.tee = exports.compact = exports.reject = exports.filter = exports.select = exports.accumulate = exports.project = exports.map = void 0;

var _pandaParchment = require("panda-parchment");

var _pandaGarden = require("panda-garden");

var _pandaGenerics = _interopRequireDefault(require("panda-generics"));

var _iterator = require("./iterator");

var _reactor = require("./reactor");

var _adapters = require("./adapters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var accumulate,
    compact,
    debounce,
    define,
    filter,
    isAny,
    limit,
    lines,
    map,
    partition,
    pour,
    project,
    reject,
    select,
    take,
    tee,
    throttle,
    splice = [].splice;
exports.throttle = throttle;
exports.tee = tee;
exports.take = take;
exports.select = select;
exports.reject = reject;
exports.project = project;
exports.partition = partition;
exports.map = map;
exports.lines = lines;
exports.limit = limit;
exports.filter = filter;
exports.compact = compact;
exports.accumulate = accumulate;

isAny = function (x) {
  return true;
};

define = function ({
  name,
  description,
  terms,
  iterator,
  reactor
}) {
  var f;
  f = _pandaGenerics.default.create({
    name: name,
    description: description,
    default: function (...args) {
      var last, ref;
      ref = args, [...args] = ref, [last] = splice.call(args, -1);

      if (args.length === terms.length) {
        return f(...args, (0, _adapters.producer)(last));
      } else {
        throw `${name}: wrong number of arguments`;
      }
    }
  });

  _pandaGenerics.default.define(f, ...terms, _iterator.isIterator, iterator);

  _pandaGenerics.default.define(f, ...terms, _reactor.isReactor, reactor);

  return f;
}; // map


exports.map = map = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "map",
  description: "Apply a transformation function to an iterator's products.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield f(x)));
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      results.push((yield f(x)));
    }

    return results;
  }
}))); // project

exports.project = project = (0, _pandaGarden.curry)(function (p, i) {
  return map((0, _pandaParchment.property)(p), i);
}); // accumulate

exports.accumulate = accumulate = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(define({
  name: "accumulate",
  description: "Apply a transformation function to an iterator's products, producing an accumulated result.",
  terms: [_pandaParchment.isFunction, isAny],
  iterator: function* (f, k, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield k = f(k, x)));
    }

    return results;
  },
  reactor: async function* (f, k, r) {
    var results, x;
    results = [];

    for await (x of r) {
      results.push((yield k = f(k, x)));
    }

    return results;
  }
}))); // select

exports.select = select = exports.filter = filter = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "select",
  description: "Apply a filtering function to products of an iterator.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      if (f(x)) {
        results.push((yield x));
      }
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      if (f(x)) {
        results.push((yield x));
      }
    }

    return results;
  }
}))); // reject

exports.reject = reject = (0, _pandaGarden.curry)(function (f, i) {
  return select((0, _pandaGarden.negate)(f), i);
}); // compact

exports.compact = compact = select(_pandaParchment.isDefined); // tee

exports.tee = tee = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "tee",
  description: "Apply a function to an iterator's products, returning them.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield (0, _pandaGarden.tee)(f)(x)));
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      results.push((yield (0, _pandaGarden.tee)(f)(x)));
    }

    return results;
  }
}))); // partition

exports.partition = partition = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "partition",
  description: "Batches an interator's products in groups of N.",
  terms: [_pandaParchment.isNumber],
  iterator: function* (n, i) {
    var batch, x;
    batch = [];

    for (x of i) {
      batch.push(x);

      if (batch.length === n) {
        yield batch;
        batch = [];
      }
    }

    if (batch.length > 0) {
      return yield batch;
    }
  },
  reactor: async function* (n, r) {
    var batch, x;
    batch = [];

    for await (x of r) {
      batch.push(x);

      if (batch.length === n) {
        yield batch;
        batch = [];
      }
    }

    if (batch.length > 0) {
      return yield batch;
    }
  }
}))); // take

exports.take = take = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "take",
  description: "Apply a function to each product until it returns false.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      if (f(x)) {
        results.push((yield x));
      } else {
        break;
      }
    }

    return results;
  },
  reactor: async function* (f, r) {
    var results, x;
    results = [];

    for await (x of r) {
      if (f(x)) {
        results.push((yield x));
      } else {
        break;
      }
    }

    return results;
  }
}))); // limit

exports.limit = limit = function () {
  var f;

  f = function (n, i = 0) {
    return function () {
      return i++ < n;
    };
  };

  return function (n, i) {
    return take(f(n), i);
  };
}(); // pour
// TODO: generalize beyond strings
// possibly with a 2nd “combine” function?


pour = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "pour",
  description: "Transforms the unit of iteration, ex: from blocks to lines.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var first, j, last, len, line, lines, ref, remainder, x;
    remainder = "";

    for (x of i) {
      ref = f(x), [first, ...lines] = ref, [last] = splice.call(lines, -1);
      yield remainder + first;
      remainder = last;

      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        yield line;
      }
    }

    if (remainder !== "") {
      return yield remainder;
    }
  },
  reactor: async function* (f, r) {
    var first, j, last, len, line, lines, ref, remainder, x;
    remainder = "";

    for await (x of r) {
      ref = f(x), [first, ...lines] = ref, [last] = splice.call(lines, -1);
      yield remainder + first;
      remainder = last;

      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        yield line;
      }
    }

    if (remainder !== "") {
      return yield remainder;
    }
  }
}))); // lines

exports.lines = lines = pour(function (s) {
  return s.toString().split("\n");
}); // throttle

exports.throttle = throttle = debounce = (0, _pandaGarden.curry)(async function* (interval, r) {
  var last, results, x;
  last = 0;
  results = [];

  for await (x of r) {
    if (Date.now() - last >= interval) {
      results.push((yield x));
    } else {
      results.push(void 0);
    }
  }

  return results;
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-river/src/filters.coffee