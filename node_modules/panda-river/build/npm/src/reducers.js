"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delimit = exports.average = exports.sum = exports.all = exports.any = exports.start = exports.each = exports.collect = exports.reduceRight = exports.foldr = exports.fold = exports.reduce = void 0;

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _pandaGenerics = _interopRequireDefault(require("panda-generics"));

var _iterator = require("./iterator");

var _reactor = require("./reactor");

var _adapters = require("./adapters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var all,
    any,
    average,
    collect,
    define,
    delimit,
    each,
    fold,
    foldr,
    isAny,
    reduce,
    reduceRight,
    start,
    sum,
    splice = [].splice;
exports.sum = sum;
exports.start = start;
exports.reduceRight = reduceRight;
exports.reduce = reduce;
exports.foldr = foldr;
exports.fold = fold;
exports.each = each;
exports.delimit = delimit;
exports.collect = collect;
exports.average = average;
exports.any = any;
exports.all = all;

isAny = function (x) {
  return true;
};

define = function ({
  name,
  description,
  terms,
  iterator,
  reactor
}) {
  var f;
  f = _pandaGenerics.default.create({
    name: name,
    description: description,
    default: function () {
      throw `${name}: invalid arguments`;
    }
  });

  _pandaGenerics.default.define(f, ...terms, _pandaParchment.isDefined, function (...args) {
    var last, ref;
    ref = args, [...args] = ref, [last] = splice.call(args, -1);

    if (args.length === terms.length) {
      return f(...args, (0, _adapters.producer)(last));
    } else {
      throw `${name}: wrong number of arguments`;
    }
  });

  _pandaGenerics.default.define(f, ...terms, _iterator.isIterator, iterator);

  _pandaGenerics.default.define(f, ...terms, _reactor.isReactor, reactor);

  return f;
};

exports.start = start = define({
  name: "start",
  description: "Obtain products but do nothing with them.",
  terms: [],
  iterator: function (i) {
    var x;

    for (x of i) {
      void 0;
    }

    return void 0;
  },
  reactor: async function (r) {
    var x;

    for await (x of r) {
      void 0;
    }

    return void 0;
  }
}); // The point here is to avoid using memory.

exports.each = each = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "each",
  description: "Apply a function to each product, returning undefined.",
  terms: [_pandaParchment.isFunction],
  iterator: function (f, i) {
    var x;

    for (x of i) {
      f(x);
    }

    return void 0;
  },
  reactor: async function (f, r) {
    var x;

    for await (x of r) {
      f(x);
    }

    return void 0;
  }
})));
exports.reduce = reduce = exports.fold = fold = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(define({
  name: "fold/reduce",
  description: "Fold or reduce a producer into a value.",
  terms: [_pandaParchment.isFunction, isAny],
  iterator: function (f, k, i) {
    var x;

    for (x of i) {
      k = f(k, x);
    }

    return k;
  },
  reactor: async function (f, k, r) {
    var x;

    for await (x of r) {
      k = f(k, x);
    }

    return k;
  }
})));

exports.collect = collect = function (p) {
  return reduce(_pandaParchment.push, [], p);
};

exports.reduceRight = reduceRight = exports.foldr = foldr = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(define({
  name: "foldr/reduceRight",
  description: "Fold or reduce a producer into a value.",
  terms: [_pandaParchment.isFunction, isAny],
  iterator: function (f, k, i) {
    return collect(i).reduceRight(f, k);
  },
  reactor: async function (f, k, r) {
    return (await collect(r)).reduceRight(f, k);
  }
})));
exports.any = any = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "any",
  description: "Return true if any product satisfies the predicate.",
  terms: [_pandaParchment.isFunction],
  iterator: function (f, i) {
    var x;

    for (x of i) {
      if (f(x)) {
        return true;
      }
    }

    return false;
  },
  reactor: async function (f, r) {
    var x;

    for await (x of r) {
      if (f(x)) {
        return true;
      }
    }

    return false;
  }
})));
exports.all = all = (0, _pandaGarden.curry)(function (f, p) {
  return !any((0, _pandaGarden.negate)(f), p);
});

exports.sum = sum = function (ax) {
  return fold(_pandaParchment.add, 0, ax);
};

exports.average = average = function (i) {
  var f, j;
  j = 0; // current count

  f = function (r, n) {
    return r += (n - r) / ++j;
  };

  return fold(f, 0, i);
};

exports.delimit = delimit = (0, _pandaGarden.curry)(function (d, i) {
  var f;

  f = function (r, s) {
    if (r === "") {
      return r += s;
    } else {
      return r += d + s;
    }
  };

  return fold(f, "", i);
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-river/src/reducers.coffee