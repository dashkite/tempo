"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pool = exports.wait = exports.into = exports.go = exports.flow = exports.union = exports.read = exports.events = exports.repeat = exports.producer = exports.isProducer = void 0;

var _pandaGenerics = _interopRequireDefault(require("panda-generics"));

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _iterator = require("./iterator");

var _reactor = require("./reactor");

var _reducers = require("./reducers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var create, define, events, flow, go, into, isFunctionList, isProducer, pool, producer, queue, read, repeat, union, wait;
exports.wait = wait;
exports.union = union;
exports.repeat = repeat;
exports.read = read;
exports.producer = producer;
exports.pool = pool;
exports.isProducer = isProducer;
exports.into = into;
exports.go = go;
exports.flow = flow;
exports.events = events;
({
  create,
  define
} = _pandaGenerics.default); // isProducer

exports.isProducer = isProducer = function (x) {
  return (0, _iterator.isIterator)(x) || (0, _reactor.isReactor)(x);
}; // producer


exports.producer = producer = create({
  name: "producer",
  description: "Attempts to turn its argument into an iterator or reactor."
});
define(producer, _iterator.isIterable, function (x) {
  return (0, _iterator.iterator)(x);
});
define(producer, _reactor.isReagent, function (x) {
  return (0, _reactor.reactor)(x);
});
define(producer, isProducer, _pandaGarden.identity); // repeat

exports.repeat = repeat = function* (x) {
  while (true) {
    yield x;
  }
}; // queue


queue = function () {
  var dq, p, q;
  q = [];
  p = [];
  return {
    enqueue: function (value) {
      var resolve;

      if (p.length > 0) {
        resolve = p.shift();
        return resolve(value);
      } else {
        return q.push(value);
      }
    },
    dequeue: dq = function () {
      if (q.length > 0) {
        return (0, _pandaParchment.follow)(q.shift());
      } else {
        return (0, _pandaParchment.promise)(function (resolve) {
          return p.push(resolve);
        });
      }
    },
    idle: function () {
      return p.length === 0 && q.length === 0;
    }
  };
}; // events


exports.events = events = (0, _pandaGarden.curry)(async function* (name, source) {
  var q, results;
  q = queue();

  if (source.on != null) {
    source.on(name, function (event) {
      return q.enqueue(event);
    });
  } else if (source.addEventListener != null) {
    source.addEventListener(name, function (event) {
      return q.enqueue(event);
    });
  } else {
    throw new TypeError("events: source must support `on` or `addEventListener` method");
  }

  results = [];

  while (true) {
    results.push((yield await q.dequeue()));
  }

  return results;
}); // read

exports.read = read = async function* (s) {
  var data, end, q, results;
  q = queue();
  end = false;
  s.on("data", function (data) {
    return q.enqueue(data);
  });
  s.on("error", function (error) {
    return q.enqueue((0, _pandaParchment.reject)(error));
  });
  s.on("end", function () {
    end = true;
    return q.enqueue(void 0);
  });
  results = [];

  while (true) {
    data = await q.dequeue();

    if (end) {
      break;
    } else {
      results.push((yield data));
    }
  }

  return results;
}; // union


exports.union = union = async function* (...px) {
  var done, i, len, p, q, results;
  q = queue();
  done = 0;

  for (i = 0, len = px.length; i < len; i++) {
    p = px[i];

    (async function (p) {
      var x;

      for await (x of p) {
        q.enqueue(x);
      }

      return done++;
    })(p);
  }

  while (true) {
    yield await q.dequeue();

    if (done === px.length) {
      break;
    }
  }

  results = [];

  while (!q.idle()) {
    results.push((yield await q.dequeue()));
  }

  return results;
}; // flow


isFunctionList = function (...fx) {
  var f, i, len;

  for (i = 0, len = fx.length; i < len; i++) {
    f = fx[i];

    if (!(0, _pandaParchment.isFunction)(f)) {
      return false;
    }
  }

  return true;
};

exports.flow = flow = create({
  name: "flow",
  description: "Compose functions and a producer."
}); // check for promise

define(flow, _pandaParchment.isDefined, _pandaParchment.isArray, function (x, ax) {
  return flow(x, ...ax);
});
define(flow, _pandaParchment.isDefined, isFunctionList, function (x, ...fx) {
  return flow(x, (0, _pandaGarden.pipe)(...fx));
});
define(flow, _pandaParchment.isDefined, _pandaParchment.isFunction, function (x, f) {
  return flow(producer(x), f);
});
define(flow, _pandaParchment.isPromise, _pandaParchment.isFunction, async function (x, f) {
  return flow((await x), f);
});
define(flow, isProducer, _pandaParchment.isFunction, function (p, f) {
  return f(p);
});
define(flow, _pandaParchment.isArray, function (ax) {
  return flow(...ax);
});
exports.go = go = (0, _pandaGarden.compose)(_reducers.start, flow);
exports.into = into = (0, _pandaGarden.curry)((0, _pandaGarden.binary)((0, _pandaGarden.flip)(go)));
exports.wait = wait = (0, _pandaGarden.curry)(async function* (filter, producer) {
  var ref, results, x;
  ref = filter(producer);
  results = [];

  for await (x of ref) {
    results.push((yield await x));
  }

  return results;
});
exports.pool = pool = (0, _pandaGarden.curry)(async function* (filter, producer) {
  var i, len, ref, results, x;
  ref = await (0, _pandaParchment.all)((0, _reducers.collect)(filter(producer)));
  results = [];

  for (i = 0, len = ref.length; i < len; i++) {
    x = ref[i];
    results.push((yield x));
  }

  return results;
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-river/src/adapters.coffee