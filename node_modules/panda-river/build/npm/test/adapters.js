"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _fs = require("fs");

var _events = _interopRequireDefault(require("events"));

var _amen = require("amen");

var _pandaParchment = require("panda-parchment");

var _iterator = require("../src/iterator");

var _reactor = require("../src/reactor");

var _filters = require("../src/filters");

var _adapters = require("../src/adapters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = [(0, _amen.test)("producer", function () {
  (0, _assert.default)((0, _iterator.isIterator)((0, _adapters.producer)([])));
  return (0, _assert.default)((0, _reactor.isReactor)((0, _adapters.producer)(async function* () {
    return yield await null;
  })));
}), (0, _amen.test)("repeat", function () {
  var i, ref, results1, x;
  x = 0;
  ref = (0, _adapters.repeat)(0);
  results1 = [];

  for (i of ref) {
    if (x++ > 5) {
      break;
    }

    results1.push(_assert.default.equal(0, i));
  }

  return results1;
}), (0, _amen.test)("events", async function () {
  var i, j, ref, results1, source;
  source = new _events.default();

  (async function () {
    var i, k, results1;
    results1 = [];

    for (i = k = 1; k <= 5; i = ++k) {
      await (0, _pandaParchment.follow)(1);
      results1.push(source.emit("test", i));
    }

    return results1;
  })();

  j = 1;
  ref = (0, _adapters.events)("test", source);
  results1 = [];

  for await (i of ref) {
    _assert.default.equal(j++, i);

    if (i === 5) {
      break;
    } else {
      results1.push(void 0);
    }
  }

  return results1;
}), (0, _amen.test)("read", async function () {
  var content, data, ref;
  content = "";
  ref = (0, _adapters.read)((0, _fs.createReadStream)("test/data/lines.txt"));

  for await (data of ref) {
    content += data.toString();
  }

  return _assert.default.equal("one\ntwo\nthree\n", content);
}), (0, _amen.test)("union", async function () {
  var x;
  return _assert.default.deepEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], (await async function () {
    var ref, results1;
    ref = (0, _adapters.union)([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]);
    results1 = [];

    for await (x of ref) {
      results1.push(x);
    }

    return results1;
  }()));
}), (0, _amen.test)("flow", async function () {
  var r, x;
  r = (0, _adapters.flow)([[1, 2, 3, 4, 5], (0, _filters.map)(function (x) {
    return x * 2;
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], (await async function () {
    var results1;
    results1 = [];

    for await (x of r) {
      results1.push(x);
    }

    return results1;
  }()));
}), (0, _amen.test)("go", [(0, _amen.test)("with producer", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _filters.map)(function (x) {
    return x * 2;
  }), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
}), (0, _amen.test)("with promise", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([(0, _pandaParchment.follow)([1, 2, 3, 4, 5]), (0, _filters.map)(function (x) {
    return x * 2;
  }), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
})]), (0, _amen.test)("into", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _filters.map)(function (n) {
    return function () {
      var results1 = [];

      for (var k = 1; 1 <= n ? k <= n : k >= n; 1 <= n ? k++ : k--) {
        results1.push(k);
      }

      return results1;
    }.apply(this);
  }), (0, _filters.map)((0, _adapters.into)([(0, _filters.map)(function (n) {
    return results.push(n);
  })]))]);
  return _assert.default.deepEqual([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], results);
}), (0, _amen.test)("wait", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _adapters.wait)((0, _filters.map)(function (x) {
    return (0, _pandaParchment.follow)(x * 2);
  })), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
}), (0, _amen.test)("pool", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _adapters.pool)((0, _filters.map)(function (x) {
    // prove that we don't append to the array until
    // all the results are in ...
    return (0, _pandaParchment.follow)(results.length === 0 ? x * 2 : void 0);
  })), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
})];
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-river/test/adapters.coffee