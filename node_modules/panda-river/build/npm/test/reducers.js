"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _reducers = require("../src/reducers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var spec;

spec = function (name, {
  expected,
  reducer,
  iterable
}) {
  return (0, _amen.test)(name, [(0, _amen.test)("iterator", function () {
    return _assert.default.deepEqual(expected, reducer(iterable));
  }), (0, _amen.test)("reactor", async function () {
    var r;

    r = async function* () {
      var results, x;
      results = [];

      for await (x of iterable) {
        results.push((yield x));
      }

      return results;
    };

    return _assert.default.deepEqual(expected, (await reducer(r)));
  })]);
};

var _default = [spec("collect", {
  iterable: [1, 2, 3, 4, 5],
  expected: [1, 2, 3, 4, 5],
  reducer: _reducers.collect
}), spec("each", {
  iterable: [1, 2, 3, 4, 5],
  expected: void 0,
  reducer: (0, _reducers.each)(function (y) {
    return function (x) {
      (0, _assert.default)(x === y);
      return y = y % 5 + 1;
    };
  }(1))
}), spec("fold/reduce", {
  iterable: [1, 2, 3, 4, 5],
  expected: 15,
  reducer: (0, _reducers.fold)(_pandaParchment.add, 0)
}), spec("foldr/reduceRight", {
  iterable: "panama",
  expected: "amanap",
  reducer: (0, _reducers.foldr)(_pandaParchment.add, "")
}), spec("any", {
  iterable: [1, 2, 3, 4, 5],
  expected: true,
  reducer: (0, _reducers.any)(_pandaParchment.odd)
}), spec("all", {
  iterable: [1, 2, 3, 4, 5],
  expected: false,
  reducer: (0, _reducers.all)(_pandaParchment.odd)
}), spec("sum", {
  iterable: [1, 2, 3, 4, 5],
  expected: 15,
  reducer: _reducers.sum
}), spec("average", {
  iterable: [1, 2, 3, 4, 5],
  expected: 3,
  reducer: _reducers.average
}), spec("delimit", {
  iterable: ["one", "two", "three"],
  expected: "one, two, three",
  reducer: (0, _reducers.delimit)(", ")
})];
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1yaXZlci90ZXN0L3JlZHVjZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7QUFOQSxJQUFBLElBQUE7O0FBU0EsSUFBQSxHQUFPLFVBQUEsSUFBQSxFQUFPO0FBQUEsRUFBQSxRQUFBO0FBQUEsRUFBQSxPQUFBO0FBQVAsRUFBQTtBQUFPLENBQVAsRUFBQTtTQUVMLGdCQUFBLElBQUEsRUFBVyxDQUNULGdCQUFBLFVBQUEsRUFBaUIsWUFBQTtXQUNmLGdCQUFBLFNBQUEsQ0FBQSxRQUFBLEVBQTJCLE9BQUEsQ0FBM0IsUUFBMkIsQ0FBM0IsQztBQUZPLEdBQ1QsQ0FEUyxFQUlULGdCQUFBLFNBQUEsRUFBZ0Isa0JBQUE7QUFDZCxRQUFBLENBQUE7O0FBQUEsSUFBQSxDQUFBLEdBQUksbUJBQUE7QUFBRyxVQUFBLE9BQUEsRUFBQSxDQUFBO0FBQVEsTUFBQSxPQUFBLEdBQUEsRUFBQTs7QUFBQSxpQkFBQSxDQUFBLElBQUEsUUFBQSxFQUFBO2dCQUFSLEksRUFBQSxNQUFBLEM7QUFBUTs7O0FBQVgsS0FBSjs7V0FDQSxnQkFBQSxTQUFBLENBQUEsUUFBQSxHQUEyQixNQUFNLE9BQUEsQ0FBakMsQ0FBaUMsQ0FBakMsRTtBQU5PLEdBSVQsQ0FKUyxDQUFYLEM7QUFGSyxDQUFQOztlQVdlLENBRWIsSUFBQSxDQUFBLFNBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQURWLENBQ1UsQ0FEVjtBQUVBLEVBQUEsT0FBQSxFQUFTO0FBRlQsQ0FERixDQUZhLEVBT2IsSUFBQSxDQUFBLE1BQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFVLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFWLENBQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQUFVLEtBRFYsQ0FBQTtBQUVBLEVBQUEsT0FBQSxFQUFTLG9CQUFRLFVBQUEsQ0FBQSxFQUFBO1dBQ2YsVUFBQSxDQUFBLEVBQUE7QUFDRSwyQkFBTyxDQUFBLEtBQVAsQ0FBQTthQUNBLENBQUEsR0FBSyxDQUFBLEdBQUQsQ0FBQSxHQUFVLEM7QUFGaEIsSztBQURZLEdBQUcsQ0FBUixDQUFRLENBQVI7QUFGVCxDQURGLENBUGEsRUFlYixJQUFBLENBQUEsYUFBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBREEsRUFBQTtBQUVBLEVBQUEsT0FBQSxFQUFTLG9CQUFBLG1CQUFBLEVBQUEsQ0FBQTtBQUZULENBREYsQ0FmYSxFQW9CYixJQUFBLENBQUEsbUJBQUEsRUFDRTtBQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUE7QUFDQSxFQUFBLFFBQUEsRUFEQSxRQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVMscUJBQUEsbUJBQUEsRUFBQSxFQUFBO0FBRlQsQ0FERixDQXBCYSxFQXlCYixJQUFBLENBQUEsS0FBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBREEsSUFBQTtBQUVBLEVBQUEsT0FBQSxFQUFTLG1CQUFBLG1CQUFBO0FBRlQsQ0FERixDQXpCYSxFQThCYixJQUFBLENBQUEsS0FBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBREEsS0FBQTtBQUVBLEVBQUEsT0FBQSxFQUFTLG1CQUFBLG1CQUFBO0FBRlQsQ0FERixDQTlCYSxFQW1DYixJQUFBLENBQUEsS0FBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBREEsRUFBQTtBQUVBLEVBQUEsT0FBQSxFQUFTO0FBRlQsQ0FERixDQW5DYSxFQXdDYixJQUFBLENBQUEsU0FBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBREEsQ0FBQTtBQUVBLEVBQUEsT0FBQSxFQUFTO0FBRlQsQ0FERixDQXhDYSxFQTZDYixJQUFBLENBQUEsU0FBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFWLE9BQVUsQ0FBVjtBQUNBLEVBQUEsUUFBQSxFQURBLGlCQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVMsdUJBQUEsSUFBQTtBQUZULENBREYsQ0E3Q2EsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge3Rlc3R9IGZyb20gXCJhbWVuXCJcblxuaW1wb3J0IHtpZGVudGl0eX0gZnJvbSBcInBhbmRhLWdhcmRlblwiXG5pbXBvcnQge2ZpcnN0LCBhZGQsIG9kZCwgcHVzaCwgd30gZnJvbSBcInBhbmRhLXBhcmNobWVudFwiXG5cbmltcG9ydCB7cmVkdWNlLCBmb2xkLCBmb2xkciwgY29sbGVjdCwgZWFjaCwgc3RhcnQsIGFueSwgYWxsLFxuICBzdW0sIGF2ZXJhZ2UsIGRlbGltaXR9IGZyb20gXCIuLi9zcmMvcmVkdWNlcnNcIlxuXG5zcGVjID0gKG5hbWUsIHtleHBlY3RlZCwgcmVkdWNlciwgaXRlcmFibGV9KSAtPlxuXG4gIHRlc3QgbmFtZSwgW1xuICAgIHRlc3QgXCJpdGVyYXRvclwiLCAtPlxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgcmVkdWNlciBpdGVyYWJsZVxuXG4gICAgdGVzdCBcInJlYWN0b3JcIiwgLT5cbiAgICAgIHIgPSAtPiB5aWVsZCB4IGZvciBhd2FpdCB4IGZyb20gaXRlcmFibGVcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsIGF3YWl0IHJlZHVjZXIgclxuICBdXG5cbmV4cG9ydCBkZWZhdWx0IFtcblxuICBzcGVjIFwiY29sbGVjdFwiLFxuICAgIGl0ZXJhYmxlOiBbMS4uNV1cbiAgICBleHBlY3RlZDogWzEuLjVdXG4gICAgcmVkdWNlcjogY29sbGVjdFxuXG4gIHNwZWMgXCJlYWNoXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiB1bmRlZmluZWRcbiAgICByZWR1Y2VyOiBlYWNoIGRvICh5PTEpIC0+XG4gICAgICAoeCkgLT5cbiAgICAgICAgYXNzZXJ0IHggPT0geVxuICAgICAgICB5ID0gKHkgJSA1KSArIDFcblxuICBzcGVjIFwiZm9sZC9yZWR1Y2VcIixcbiAgICBpdGVyYWJsZTogWzEuLjVdXG4gICAgZXhwZWN0ZWQ6IDE1XG4gICAgcmVkdWNlcjogZm9sZCBhZGQsIDBcblxuICBzcGVjIFwiZm9sZHIvcmVkdWNlUmlnaHRcIixcbiAgICBpdGVyYWJsZTogXCJwYW5hbWFcIlxuICAgIGV4cGVjdGVkOiBcImFtYW5hcFwiXG4gICAgcmVkdWNlcjogZm9sZHIgYWRkLCBcIlwiXG5cbiAgc3BlYyBcImFueVwiLFxuICAgIGl0ZXJhYmxlOiBbMS4uNV1cbiAgICBleHBlY3RlZDogdHJ1ZVxuICAgIHJlZHVjZXI6IGFueSBvZGRcblxuICBzcGVjIFwiYWxsXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiBmYWxzZVxuICAgIHJlZHVjZXI6IGFsbCBvZGRcblxuICBzcGVjIFwic3VtXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiAxNVxuICAgIHJlZHVjZXI6IHN1bVxuXG4gIHNwZWMgXCJhdmVyYWdlXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiAzXG4gICAgcmVkdWNlcjogYXZlcmFnZVxuXG4gIHNwZWMgXCJkZWxpbWl0XCIsXG4gICAgaXRlcmFibGU6IFsgXCJvbmVcIiwgXCJ0d29cIiwgXCJ0aHJlZVwiIF1cbiAgICBleHBlY3RlZDogXCJvbmUsIHR3bywgdGhyZWVcIlxuICAgIHJlZHVjZXI6IGRlbGltaXQgXCIsIFwiXG5dXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/repos/panda-river/test/reducers.coffee