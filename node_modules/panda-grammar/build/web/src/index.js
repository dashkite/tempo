var all, any, between, escape, forward, grammar, join, list, many, match, merge, optional, re, rule, string, tag, word, ws;

match = function (re, s) {
  return s.match(re);
};

escape = function (s) {
  return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
};

re = function (re) {
  return function (s) {
    var $m, rest, value;

    if (($m = match(re, s)) != null) {
      [value] = $m;
      rest = s.slice($m.index + value.length);
      return {
        value,
        rest
      };
    }
  };
};

word = re(/^\w+/);
ws = re(/^\s+/);

string = function (s) {
  return re(RegExp(`^${escape(s)}`));
};

any = function (...px) {
  return function (s) {
    var $m, i, len, p;

    for (i = 0, len = px.length; i < len; i++) {
      p = px[i];
      $m = p(s);

      if ($m != null) {
        return $m;
      }
    }

    return null;
  };
};

optional = function (p) {
  return any(p, function (s) {
    return {
      rest: s
    };
  });
};

all = function (...px) {
  return function (s) {
    var $m, i, len, p, rest, value, values;
    values = [];

    for (i = 0, len = px.length; i < len; i++) {
      p = px[i];
      $m = p(s);

      if ($m == null) {
        return null;
      }

      ({
        value,
        rest
      } = $m);
      s = rest;
      values.push(value);
    }

    return {
      value: values,
      rest: s
    };
  };
};

many = function (p) {
  return function (s) {
    var $m, r;
    r = [];

    while (s.length > 0 && ($m = p(s)) != null) {
      r.push($m.value);
      s = $m.rest;
    }

    if (r.length > 0) {
      return {
        value: r,
        rest: s
      };
    }
  };
};

list = function (d, p) {
  return function (rest) {
    var $m, _value, value;

    _value = [];

    while (rest.length > 0) {
      if (($m = p(rest)) != null) {
        ({
          value,
          rest
        } = $m);

        _value.push(value);

        if (($m = d(rest)) != null) {
          ({
            rest
          } = $m);
        } else {
          return {
            value: _value,
            rest
          };
        }
      } else {
        return null;
      }
    }
  };
};

between = function (open, close, p) {
  return rule(all(open, p, close), function ({
    value: [, v]
  }) {
    return v;
  });
};

forward = function (fn) {
  return function (s) {
    return fn()(s);
  };
};

rule = function (p, a) {
  return function (s) {
    var $m;
    $m = p(s);

    if ($m != null) {
      return {
        value: a($m),
        rest: $m.rest
      };
    }
  };
};

tag = function (name, p) {
  return rule(p, function ({
    value
  }) {
    return {
      [name]: value
    };
  });
};

merge = function (p) {
  return rule(p, function ({
    value
  }) {
    return Object.assign({}, ...value);
  });
};

join = function (p) {
  return rule(p, function ({
    value
  }) {
    return value.join("");
  });
};

grammar = function (r) {
  return function (s) {
    var $m, rest, value;
    $m = r(s);

    if ($m != null) {
      ({
        value,
        rest
      } = $m);

      if (rest === "") {
        return value;
      }
    }
  };
};

module.exports = {
  re,
  string,
  word,
  ws,
  any,
  optional,
  forward,
  all,
  many,
  list,
  between,
  rule,
  tag,
  merge,
  join,
  grammar
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1ncmFtbWFyL3NyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFRLFVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQTtTQUFXLENBQUMsQ0FBRCxLQUFBLENBQUEsRUFBQSxDO0FBQVgsQ0FBUjs7QUFFQSxNQUFBLEdBQVMsVUFBQSxDQUFBLEVBQUE7U0FBTyxDQUFDLENBQUQsT0FBQSxDQUFBLHFCQUFBLEVBQUEsTUFBQSxDO0FBQVAsQ0FBVDs7QUFFQSxFQUFBLEdBQUssVUFBQSxFQUFBLEVBQUE7U0FDSCxVQUFBLENBQUEsRUFBQTtBQUNFLFFBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBOztBQUFBLFFBQUcsQ0FBQSxFQUFBLEdBQUEsS0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBLENBQUEsS0FBSCxJQUFBLEVBQUE7QUFDRSxPQUFBLEtBQUEsSUFBVSxFQUFWO0FBQ0EsTUFBQSxJQUFBLEdBQU8sQ0FBRSxDQUFBLEtBQUYsQ0FBRSxFQUFBLENBQUEsS0FBQSxHQUFBLEtBQUEsQ0FBQSxNQUFGLENBQVA7YUFDQTtBQUFBLFFBQUEsS0FBQTtBQUhGLFFBQUE7QUFHRSxPOztBQUpKLEc7QUFERyxDQUFMOztBQU9BLElBQUEsR0FBTyxFQUFBLENBQUEsTUFBQSxDQUFQO0FBRUEsRUFBQSxHQUFLLEVBQUEsQ0FBQSxNQUFBLENBQUw7O0FBRUEsTUFBQSxHQUFTLFVBQUEsQ0FBQSxFQUFBO1NBQU8sRUFBQSxDQUFHLE1BQUEsQ0FBQSxJQUFN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QUM7QUFBRCxJQUFBO0FBQUMsR0FBRCxFQUFBO1dBQWEsTUFBTSxDQUFOLE1BQUEsQ0FBQSxFQUFBLEVBQWtCLEdBQWxCLEtBQUEsQztBQUFyQixHQUFBLEM7QUFBUCxDQUFSOztBQUVBLElBQUEsR0FBTyxVQUFBLENBQUEsRUFBQTtTQUFPLElBQUEsQ0FBQSxDQUFBLEVBQVEsVUFBQztBQUFELElBQUE7QUFBQyxHQUFELEVBQUE7V0FBYSxLQUFLLENBQUwsSUFBQSxDQUFBLEVBQUEsQztBQUFyQixHQUFBLEM7QUFBUCxDQUFQOztBQUVBLE9BQUEsR0FBVSxVQUFBLENBQUEsRUFBQTtTQUNSLFVBQUEsQ0FBQSxFQUFBO0FBQ0UsUUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUE7QUFBQSxJQUFBLEVBQUEsR0FBSyxDQUFBLENBQUEsQ0FBQSxDQUFMOztBQUNBLFFBQUcsRUFBQSxJQUFILElBQUEsRUFBQTtBQUNFLE9BQUE7QUFBQSxRQUFBLEtBQUE7QUFBQSxRQUFBO0FBQUEsVUFBQSxFQUFBOztBQUNBLFVBQUcsSUFBQSxLQUFILEVBQUEsRUFBQTtlQUFBLEs7QUFGRjs7QUFGRixHO0FBRFEsQ0FBVjs7QUFRQSxNQUFNLENBQU4sT0FBQSxHQUFpQjtBQUFBLEVBQUEsRUFBQTtBQUFBLEVBQUEsTUFBQTtBQUFBLEVBQUEsSUFBQTtBQUFBLEVBQUEsRUFBQTtBQUFBLEVBQUEsR0FBQTtBQUFBLEVBQUEsUUFBQTtBQUFBLEVBQUEsT0FBQTtBQUFBLEVBQUEsR0FBQTtBQUFBLEVBQUEsSUFBQTtBQUFBLEVBQUEsSUFBQTtBQUFBLEVBQUEsT0FBQTtBQUFBLEVBQUEsSUFBQTtBQUFBLEVBQUEsR0FBQTtBQUFBLEVBQUEsS0FBQTtBQUFBLEVBQUEsSUFBQTtBQUFBLEVBQUE7QUFBQSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIm1hdGNoID0gKHJlLCBzKSAtPiBzLm1hdGNoIHJlXG5cbmVzY2FwZSA9IChzKSAtPiBzLnJlcGxhY2UgL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBcIlxcXFwkJlwiXG5cbnJlID0gKHJlKSAtPlxuICAocykgLT5cbiAgICBpZiAoJG0gPSAobWF0Y2ggcmUsIHMpKT9cbiAgICAgIFt2YWx1ZV0gPSAkbVxuICAgICAgcmVzdCA9IHNbKCRtLmluZGV4ICsgdmFsdWUubGVuZ3RoKS4uXVxuICAgICAge3ZhbHVlLCByZXN0fVxuXG53b3JkID0gcmUgL15cXHcrL1xuXG53cyA9IHJlIC9eXFxzKy9cblxuc3RyaW5nID0gKHMpIC0+IHJlIC8vL14je2VzY2FwZSBzfS8vL1xuXG5hbnkgPSAocHguLi4pIC0+XG4gIChzKSAtPlxuICAgIGZvciBwIGluIHB4XG4gICAgICAkbSA9IHAgc1xuICAgICAgcmV0dXJuICRtIGlmICRtP1xuICAgIHJldHVybiBudWxsXG5cbm9wdGlvbmFsID0gKHApIC0+IGFueSBwLCAoKHMpIC0+IHJlc3Q6IHMpXG5cbmFsbCA9IChweC4uLikgLT5cbiAgKHMpIC0+XG4gICAgdmFsdWVzID0gW11cbiAgICBmb3IgcCBpbiBweFxuICAgICAgJG0gPSBwIHNcbiAgICAgIHJldHVybiBudWxsIHVubGVzcyAkbT9cbiAgICAgIHt2YWx1ZSwgcmVzdH0gPSAkbVxuICAgICAgcyA9IHJlc3RcbiAgICAgIHZhbHVlcy5wdXNoIHZhbHVlXG4gICAge3ZhbHVlOiB2YWx1ZXMsIHJlc3Q6IHN9XG5cbm1hbnkgPSAocCkgLT5cbiAgKHMpIC0+XG4gICAgciA9IFtdXG4gICAgd2hpbGUgKHMubGVuZ3RoID4gMCkgJiYgKCRtID0gcCBzKT9cbiAgICAgIHIucHVzaCAkbS52YWx1ZVxuICAgICAgcyA9ICRtLnJlc3RcbiAgICB7dmFsdWU6IHIsIHJlc3Q6IHN9IGlmIHIubGVuZ3RoID4gMFxuXG5saXN0ID0gKGQsIHApIC0+XG4gIChyZXN0KSAtPlxuICAgIF92YWx1ZSA9IFtdXG4gICAgd2hpbGUgcmVzdC5sZW5ndGggPiAwXG4gICAgICBpZiAoJG0gPSAocCByZXN0KSk/XG4gICAgICAgIHt2YWx1ZSwgcmVzdH0gPSAkbVxuICAgICAgICBfdmFsdWUucHVzaCB2YWx1ZVxuICAgICAgICBpZiAoJG0gPSBkIHJlc3QpP1xuICAgICAgICAgIHtyZXN0fSA9ICRtXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4ge3ZhbHVlOiBfdmFsdWUsIHJlc3R9XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBudWxsXG5cbmJldHdlZW4gPSAob3BlbiwgY2xvc2UsIHApIC0+XG4gIHJ1bGUgKGFsbCBvcGVuLCBwLCBjbG9zZSksICh7dmFsdWU6IFssdl19KSAtPiB2XG5cbmZvcndhcmQgPSAoZm4pIC0+IChzKSAtPiBmbigpKHMpXG5cbnJ1bGUgPSAocCwgYSkgLT5cbiAgKHMpIC0+XG4gICAgJG0gPSBwIHNcbiAgICBpZiAkbT9cbiAgICAgIHt2YWx1ZTogYSgkbSksIHJlc3Q6ICRtLnJlc3R9XG5cbnRhZyA9IChuYW1lLCBwKSAtPiBydWxlIHAsICh7dmFsdWV9KSAtPiBbbmFtZV06IHZhbHVlXG5cbm1lcmdlID0gKHApIC0+IHJ1bGUgcCwgKHt2YWx1ZX0pIC0+IE9iamVjdC5hc3NpZ24ge30sIHZhbHVlLi4uXG5cbmpvaW4gPSAocCkgLT4gcnVsZSBwLCAoe3ZhbHVlfSkgLT4gdmFsdWUuam9pbiBcIlwiXG5cbmdyYW1tYXIgPSAocikgLT5cbiAgKHMpIC0+XG4gICAgJG0gPSByKHMpXG4gICAgaWYgJG0/XG4gICAgICB7dmFsdWUsIHJlc3R9ID0gJG1cbiAgICAgIGlmIHJlc3QgPT0gXCJcIlxuICAgICAgICB2YWx1ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtyZSwgc3RyaW5nLCB3b3JkLCB3cywgYW55LCBvcHRpb25hbCwgZm9yd2FyZCxcbiAgYWxsLCBtYW55LCBsaXN0LCBiZXR3ZWVuLFxuICBydWxlLCB0YWcsIG1lcmdlLCBqb2luLFxuICBncmFtbWFyfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/panda-grammar/src/index.coffee