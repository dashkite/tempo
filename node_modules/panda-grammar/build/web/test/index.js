var assignment, cdelim, equal, parseURL, path, protocol, qdelim, query, root, scheme, sdelim, separator, url, word;
import assert from "assert";
import { print, test } from "amen";
import { re, string, any, optional, list, all, many, rule, grammar } from "../src/index"; // For now, our test case is simple URL parser, which
// exercises all the functions except ws

separator = string("/");
word = re(/^\w+/);
qdelim = string("?");
cdelim = string("&");
equal = string("=");
protocol = re(/^https?/);
sdelim = string(":");
root = string("//");
scheme = rule(all(protocol, sdelim), function ({
  value: [protocol]
}) {
  return {
    protocol
  };
});
path = rule(all(root, list(separator, word)), function ({
  value: [, components]
}) {
  return {
    components,
    path: "/" + components.join("/")
  };
});
assignment = rule(all(word, equal, word), function ({
  value: [key,, value]
}) {
  return [key, value];
});
query = rule(all(qdelim, list(cdelim, assignment)), function ({
  value: [, pairs]
}) {
  var i, k, len, v;
  query = {};

  for (i = 0, len = pairs.length; i < len; i++) {
    [k, v] = pairs[i];
    query[k] = v;
  }

  return {
    query
  };
});
url = rule(all(scheme, path, optional(query)), function ({
  value
}) {
  return Object.assign(...value);
});
parseURL = grammar(url);

(async function () {
  var testBadURL, testURL;

  testURL = function (url, expected) {
    return test(url, function () {
      return assert.deepEqual(expected, parseURL(url));
    });
  };

  testBadURL = function (url, expected) {
    return test(`Bad URL: ${url}`, function () {
      return assert.equal(void 0, parseURL(url));
    });
  };

  return print((await test("URL Parser", [testURL("http://foo", {
    protocol: "http",
    path: "/foo",
    components: ["foo"]
  }), testURL("https://foo/bar", {
    protocol: "https",
    path: "/foo/bar",
    components: ["foo", "bar"]
  }), testURL("https://foo/bar?baz=123", {
    protocol: "https",
    path: "/foo/bar",
    components: ["foo", "bar"],
    query: {
      baz: "123"
    }
  }), testURL("https://foo/bar?baz=123&fizz=buzz", {
    protocol: "https",
    path: "/foo/bar",
    components: ["foo", "bar"],
    query: {
      baz: "123",
      fizz: "buzz"
    }
  }), testBadURL("htp://foo/bar?baz=123"), testBadURL("http:/foo/bar?baz=123"), testBadURL("http://foo:bar?baz=123"), testBadURL("http://foo/bar,baz=123"), testBadURL("http://foo/bar?baz=123?fizz=buzz"), testBadURL("http://foo/bar?baz=123&fizz-buzz"), testBadURL("http://foo/bar?baz=123&fizz/buzz")])));
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1ncmFtbWFyL3Rlc3QvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsR0FBQSxFQUFBLElBQUE7QUFBQSxPQUFBLE1BQUEsTUFBQSxRQUFBO0FBQ0EsU0FBQSxLQUFBLEVBQUEsSUFBQSxRQUFBLE1BQUE7QUFFQSxTQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxRQUhBLGNBR0EsQzs7O0FBTUEsU0FBQSxHQUFZLE1BQUEsQ0FBQSxHQUFBLENBQVo7QUFDQSxJQUFBLEdBQU8sRUFBQSxDQUFBLE1BQUEsQ0FBUDtBQUNBLE1BQUEsR0FBUyxNQUFBLENBQUEsR0FBQSxDQUFUO0FBQ0EsTUFBQSxHQUFTLE1BQUEsQ0FBQSxHQUFBLENBQVQ7QUFDQSxLQUFBLEdBQVEsTUFBQSxDQUFBLEdBQUEsQ0FBUjtBQUNBLFFBQUEsR0FBVyxFQUFBLENBQUEsU0FBQSxDQUFYO0FBQ0EsTUFBQSxHQUFTLE1BQUEsQ0FBQSxHQUFBLENBQVQ7QUFDQSxJQUFBLEdBQU8sTUFBQSxDQUFBLElBQUEsQ0FBUDtBQUVBLE1BQUEsR0FBUyxJQUFBLENBQU0sR0FBQSxDQUFBLFFBQUEsRUFBTixNQUFNLENBQU4sRUFDUCxVQUFDO0FBQUMsRUFBQSxLQUFBLEVBQU8sQ0FBQSxRQUFBO0FBQVIsQ0FBRCxFQUFBO1NBQXlCO0FBQUEsSUFBQTtBQUFBLEc7QUFEbEIsQ0FBQSxDQUFUO0FBR0EsSUFBQSxHQUFPLElBQUEsQ0FBTSxHQUFBLENBQUEsSUFBQSxFQUFVLElBQUEsQ0FBQSxTQUFBLEVBQWhCLElBQWdCLENBQVYsQ0FBTixFQUNMLFVBQUM7QUFBQyxFQUFBLEtBQUEsRUFBTyxHQUFBLFVBQUE7QUFBUixDQUFELEVBQUE7U0FBNkI7QUFBQSxJQUFBLFVBQUE7QUFBYSxJQUFBLElBQUEsRUFBTSxNQUFPLFVBQVUsQ0FBVixJQUFBLENBQUQsR0FBQztBQUExQixHO0FBRHhCLENBQUEsQ0FBUDtBQUdBLFVBQUEsR0FBYSxJQUFBLENBQU0sR0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLEVBQU4sSUFBTSxDQUFOLEVBQ1gsVUFBQztBQUFDLEVBQUEsS0FBQSxFQUFPLENBQUEsR0FBQSxHQUFBLEtBQUE7QUFBUixDQUFELEVBQUE7U0FBNkIsQ0FBQSxHQUFBLEVBQUEsS0FBQSxDO0FBRGxCLENBQUEsQ0FBYjtBQUdBLEtBQUEsR0FBUSxJQUFBLENBQU0sR0FBQSxDQUFBLE1BQUEsRUFBWSxJQUFBLENBQUEsTUFBQSxFQUFsQixVQUFrQixDQUFaLENBQU4sRUFDTixVQUFDO0FBQUMsRUFBQSxLQUFBLEVBQU8sR0FBQSxLQUFBO0FBQVIsQ0FBRCxFQUFBO0FBQ0UsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsRUFBUjs7QUFDYSxPQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxHQUFBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTtBQUFJLEtBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxLQUFBLENBQUEsQ0FBQSxDQUFBO0FBQWpCLElBQUEsS0FBTSxDQUFOLENBQU0sQ0FBTixHQUFXLENBQVg7QUFBYTs7U0FDYjtBQUFBLElBQUE7QUFBQSxHO0FBSkksQ0FBQSxDQUFSO0FBTUEsR0FBQSxHQUFNLElBQUEsQ0FBTSxHQUFBLENBQUEsTUFBQSxFQUFBLElBQUEsRUFBbUIsUUFBQSxDQUF6QixLQUF5QixDQUFuQixDQUFOLEVBQ0osVUFBQztBQUFELEVBQUE7QUFBQyxDQUFELEVBQUE7U0FBYSxNQUFNLENBQU4sTUFBQSxDQUFjLEdBQWQsS0FBQSxDO0FBRFQsQ0FBQSxDQUFOO0FBR0EsUUFBQSxHQUFXLE9BQUEsQ0FBQSxHQUFBLENBQVg7O0FBR0csQ0FBQSxrQkFBQTtBQUVELE1BQUEsVUFBQSxFQUFBLE9BQUE7O0FBQUEsRUFBQSxPQUFBLEdBQVUsVUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBO1dBQ1IsSUFBQSxDQUFBLEdBQUEsRUFBVSxZQUFBO2FBQ1IsTUFBTSxDQUFOLFNBQUEsQ0FBQSxRQUFBLEVBQTJCLFFBQUEsQ0FBM0IsR0FBMkIsQ0FBM0IsQztBQURGLEtBQUEsQztBQURRLEdBQVY7O0FBSUEsRUFBQSxVQUFBLEdBQWEsVUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBO1dBQ1gsSUFBQSxDQUFLLFlBQUEsR0FBTCxFQUFBLEVBQXdCLFlBQUE7YUFDdEIsTUFBTSxDQUFOLEtBQUEsQ0FBYSxLQUFiLENBQUEsRUFBd0IsUUFBQSxDQUF4QixHQUF3QixDQUF4QixDO0FBREYsS0FBQSxDO0FBRFcsR0FBYjs7U0FJQSxLQUFBLEVBQU0sTUFBTSxJQUFBLENBQUEsWUFBQSxFQUFtQixDQUU3QixPQUFBLENBQUEsWUFBQSxFQUNFO0FBQUEsSUFBQSxRQUFBLEVBQUEsTUFBQTtBQUNBLElBQUEsSUFBQSxFQURBLE1BQUE7QUFFQSxJQUFBLFVBQUEsRUFBWSxDQUFBLEtBQUE7QUFGWixHQURGLENBRjZCLEVBTzdCLE9BQUEsQ0FBQSxpQkFBQSxFQUNFO0FBQUEsSUFBQSxRQUFBLEVBQUEsT0FBQTtBQUNBLElBQUEsSUFBQSxFQURBLFVBQUE7QUFFQSxJQUFBLFVBQUEsRUFBWSxDQUFBLEtBQUEsRUFBQSxLQUFBO0FBRlosR0FERixDQVA2QixFQVk3QixPQUFBLENBQUEseUJBQUEsRUFDRTtBQUFBLElBQUEsUUFBQSxFQUFBLE9BQUE7QUFDQSxJQUFBLElBQUEsRUFEQSxVQUFBO0FBRUEsSUFBQSxVQUFBLEVBQVksQ0FBQSxLQUFBLEVBRlosS0FFWSxDQUZaO0FBR0EsSUFBQSxLQUFBLEVBQU87QUFBQSxNQUFBLEdBQUEsRUFBSztBQUFMO0FBSFAsR0FERixDQVo2QixFQWtCN0IsT0FBQSxDQUFBLG1DQUFBLEVBQ0U7QUFBQSxJQUFBLFFBQUEsRUFBQSxPQUFBO0FBQ0EsSUFBQSxJQUFBLEVBREEsVUFBQTtBQUVBLElBQUEsVUFBQSxFQUFZLENBQUEsS0FBQSxFQUZaLEtBRVksQ0FGWjtBQUdBLElBQUEsS0FBQSxFQUFPO0FBQUEsTUFBQSxHQUFBLEVBQUEsS0FBQTtBQUFZLE1BQUEsSUFBQSxFQUFNO0FBQWxCO0FBSFAsR0FERixDQWxCNkIsRUF3QjdCLFVBQUEsQ0F4QjZCLHVCQXdCN0IsQ0F4QjZCLEVBeUI3QixVQUFBLENBekI2Qix1QkF5QjdCLENBekI2QixFQTBCN0IsVUFBQSxDQTFCNkIsd0JBMEI3QixDQTFCNkIsRUEyQjdCLFVBQUEsQ0EzQjZCLHdCQTJCN0IsQ0EzQjZCLEVBNEI3QixVQUFBLENBNUI2QixrQ0E0QjdCLENBNUI2QixFQTZCN0IsVUFBQSxDQTdCNkIsa0NBNkI3QixDQTdCNkIsRUE4QjdCLFVBQUEsQ0E5QjZCLGtDQThCN0IsQ0E5QjZCLENBQW5CLENBQVosRTtBQVZGLENBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIlxuaW1wb3J0IHtwcmludCwgdGVzdH0gZnJvbSBcImFtZW5cIlxuXG5pbXBvcnQge3JlLCBzdHJpbmcsIGFueSwgb3B0aW9uYWwsXG4gIGxpc3QsIGFsbCwgbWFueSwgcnVsZSwgZ3JhbW1hcn0gZnJvbSBcIi4uL3NyYy9pbmRleFwiXG5cbiMgRm9yIG5vdywgb3VyIHRlc3QgY2FzZSBpcyBzaW1wbGUgVVJMIHBhcnNlciwgd2hpY2hcbiMgZXhlcmNpc2VzIGFsbCB0aGUgZnVuY3Rpb25zIGV4Y2VwdCB3c1xuXG5zZXBhcmF0b3IgPSBzdHJpbmcgXCIvXCJcbndvcmQgPSByZSAvXlxcdysvXG5xZGVsaW0gPSBzdHJpbmcgXCI/XCJcbmNkZWxpbSA9IHN0cmluZyBcIiZcIlxuZXF1YWwgPSBzdHJpbmcgXCI9XCJcbnByb3RvY29sID0gcmUgL15odHRwcz8vXG5zZGVsaW0gPSBzdHJpbmcgXCI6XCJcbnJvb3QgPSBzdHJpbmcgXCIvL1wiXG5cbnNjaGVtZSA9IHJ1bGUgKGFsbCBwcm90b2NvbCwgc2RlbGltKSxcbiAgKHt2YWx1ZTogW3Byb3RvY29sXX0pIC0+IHtwcm90b2NvbH1cblxucGF0aCA9IHJ1bGUgKGFsbCByb290LCBsaXN0IHNlcGFyYXRvciwgd29yZCksXG4gICh7dmFsdWU6IFssIGNvbXBvbmVudHNdfSkgLT4ge2NvbXBvbmVudHMsIHBhdGg6IFwiL1wiICsgKGNvbXBvbmVudHMuam9pbiBcIi9cIil9XG5cbmFzc2lnbm1lbnQgPSBydWxlIChhbGwgd29yZCwgZXF1YWwsIHdvcmQpLFxuICAoe3ZhbHVlOiBba2V5LCAsIHZhbHVlXX0pIC0+IFtrZXksIHZhbHVlXVxuXG5xdWVyeSA9IHJ1bGUgKGFsbCBxZGVsaW0sIGxpc3QgY2RlbGltLCBhc3NpZ25tZW50KSxcbiAgKHt2YWx1ZTogWywgcGFpcnNdfSkgLT5cbiAgICBxdWVyeSA9IHt9XG4gICAgcXVlcnlba10gPSB2IGZvciBbaywgdl0gaW4gcGFpcnNcbiAgICB7cXVlcnl9XG5cbnVybCA9IHJ1bGUgKGFsbCBzY2hlbWUsIHBhdGgsIChvcHRpb25hbCBxdWVyeSkpLFxuICAoe3ZhbHVlfSkgLT4gT2JqZWN0LmFzc2lnbiB2YWx1ZS4uLlxuXG5wYXJzZVVSTCA9IGdyYW1tYXIgdXJsXG5cblxuZG8gLT5cblxuICB0ZXN0VVJMID0gKHVybCwgZXhwZWN0ZWQpIC0+XG4gICAgdGVzdCB1cmwsIC0+XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIGV4cGVjdGVkLCBwYXJzZVVSTCB1cmxcblxuICB0ZXN0QmFkVVJMID0gKHVybCwgZXhwZWN0ZWQpIC0+XG4gICAgdGVzdCBcIkJhZCBVUkw6ICN7dXJsfVwiLCAtPlxuICAgICAgYXNzZXJ0LmVxdWFsIHVuZGVmaW5lZCwgcGFyc2VVUkwgdXJsXG5cbiAgcHJpbnQgYXdhaXQgdGVzdCBcIlVSTCBQYXJzZXJcIiwgW1xuXG4gICAgdGVzdFVSTCBcImh0dHA6Ly9mb29cIixcbiAgICAgIHByb3RvY29sOiBcImh0dHBcIlxuICAgICAgcGF0aDogXCIvZm9vXCJcbiAgICAgIGNvbXBvbmVudHM6IFsgXCJmb29cIiBdXG5cbiAgICB0ZXN0VVJMIFwiaHR0cHM6Ly9mb28vYmFyXCIsXG4gICAgICBwcm90b2NvbDogXCJodHRwc1wiXG4gICAgICBwYXRoOiBcIi9mb28vYmFyXCJcbiAgICAgIGNvbXBvbmVudHM6IFsgXCJmb29cIiwgXCJiYXJcIiBdXG5cbiAgICB0ZXN0VVJMIFwiaHR0cHM6Ly9mb28vYmFyP2Jhej0xMjNcIixcbiAgICAgIHByb3RvY29sOiBcImh0dHBzXCJcbiAgICAgIHBhdGg6IFwiL2Zvby9iYXJcIlxuICAgICAgY29tcG9uZW50czogWyBcImZvb1wiLCBcImJhclwiIF1cbiAgICAgIHF1ZXJ5OiBiYXo6IFwiMTIzXCJcblxuICAgIHRlc3RVUkwgXCJodHRwczovL2Zvby9iYXI/YmF6PTEyMyZmaXp6PWJ1enpcIixcbiAgICAgIHByb3RvY29sOiBcImh0dHBzXCJcbiAgICAgIHBhdGg6IFwiL2Zvby9iYXJcIlxuICAgICAgY29tcG9uZW50czogWyBcImZvb1wiLCBcImJhclwiIF1cbiAgICAgIHF1ZXJ5OiBiYXo6IFwiMTIzXCIsIGZpeno6IFwiYnV6elwiXG5cbiAgICB0ZXN0QmFkVVJMIFwiaHRwOi8vZm9vL2Jhcj9iYXo9MTIzXCJcbiAgICB0ZXN0QmFkVVJMIFwiaHR0cDovZm9vL2Jhcj9iYXo9MTIzXCJcbiAgICB0ZXN0QmFkVVJMIFwiaHR0cDovL2ZvbzpiYXI/YmF6PTEyM1wiXG4gICAgdGVzdEJhZFVSTCBcImh0dHA6Ly9mb28vYmFyLGJhej0xMjNcIlxuICAgIHRlc3RCYWRVUkwgXCJodHRwOi8vZm9vL2Jhcj9iYXo9MTIzP2Zpeno9YnV6elwiXG4gICAgdGVzdEJhZFVSTCBcImh0dHA6Ly9mb28vYmFyP2Jhej0xMjMmZml6ei1idXp6XCJcbiAgICB0ZXN0QmFkVVJMIFwiaHR0cDovL2Zvby9iYXI/YmF6PTEyMyZmaXp6L2J1enpcIlxuICBdXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/repos/panda-grammar/test/index.coffee