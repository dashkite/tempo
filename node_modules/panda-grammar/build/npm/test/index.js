"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../src/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assignment, cdelim, equal, parseURL, path, protocol, qdelim, query, root, scheme, sdelim, separator, url, word;
// For now, our test case is simple URL parser, which
// exercises all the functions except ws
separator = (0, _index.string)("/");
word = (0, _index.re)(/^\w+/);
qdelim = (0, _index.string)("?");
cdelim = (0, _index.string)("&");
equal = (0, _index.string)("=");
protocol = (0, _index.re)(/^https?/);
sdelim = (0, _index.string)(":");
root = (0, _index.string)("//");
scheme = (0, _index.rule)((0, _index.all)(protocol, sdelim), function ({
  value: [protocol]
}) {
  return {
    protocol
  };
});
path = (0, _index.rule)((0, _index.all)(root, (0, _index.list)(separator, word)), function ({
  value: [, components]
}) {
  return {
    components,
    path: "/" + components.join("/")
  };
});
assignment = (0, _index.rule)((0, _index.all)(word, equal, word), function ({
  value: [key,, value]
}) {
  return [key, value];
});
query = (0, _index.rule)((0, _index.all)(qdelim, (0, _index.list)(cdelim, assignment)), function ({
  value: [, pairs]
}) {
  var i, k, len, v;
  query = {};

  for (i = 0, len = pairs.length; i < len; i++) {
    [k, v] = pairs[i];
    query[k] = v;
  }

  return {
    query
  };
});
url = (0, _index.rule)((0, _index.all)(scheme, path, (0, _index.optional)(query)), function ({
  value
}) {
  return Object.assign(...value);
});
parseURL = (0, _index.grammar)(url);

(async function () {
  var testBadURL, testURL;

  testURL = function (url, expected) {
    return (0, _amen.test)(url, function () {
      return _assert.default.deepEqual(expected, parseURL(url));
    });
  };

  testBadURL = function (url, expected) {
    return (0, _amen.test)(`Bad URL: ${url}`, function () {
      return _assert.default.equal(void 0, parseURL(url));
    });
  };

  return (0, _amen.print)((await (0, _amen.test)("URL Parser", [testURL("http://foo", {
    protocol: "http",
    path: "/foo",
    components: ["foo"]
  }), testURL("https://foo/bar", {
    protocol: "https",
    path: "/foo/bar",
    components: ["foo", "bar"]
  }), testURL("https://foo/bar?baz=123", {
    protocol: "https",
    path: "/foo/bar",
    components: ["foo", "bar"],
    query: {
      baz: "123"
    }
  }), testURL("https://foo/bar?baz=123&fizz=buzz", {
    protocol: "https",
    path: "/foo/bar",
    components: ["foo", "bar"],
    query: {
      baz: "123",
      fizz: "buzz"
    }
  }), testBadURL("htp://foo/bar?baz=123"), testBadURL("http:/foo/bar?baz=123"), testBadURL("http://foo:bar?baz=123"), testBadURL("http://foo/bar,baz=123"), testBadURL("http://foo/bar?baz=123?fizz=buzz"), testBadURL("http://foo/bar?baz=123&fizz-buzz"), testBadURL("http://foo/bar?baz=123&fizz/buzz")])));
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1ncmFtbWFyL3Rlc3QvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFIQSxJQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBOzs7QUFTQSxTQUFBLEdBQVksbUJBQUEsR0FBQSxDQUFaO0FBQ0EsSUFBQSxHQUFPLGVBQUEsTUFBQSxDQUFQO0FBQ0EsTUFBQSxHQUFTLG1CQUFBLEdBQUEsQ0FBVDtBQUNBLE1BQUEsR0FBUyxtQkFBQSxHQUFBLENBQVQ7QUFDQSxLQUFBLEdBQVEsbUJBQUEsR0FBQSxDQUFSO0FBQ0EsUUFBQSxHQUFXLGVBQUEsU0FBQSxDQUFYO0FBQ0EsTUFBQSxHQUFTLG1CQUFBLEdBQUEsQ0FBVDtBQUNBLElBQUEsR0FBTyxtQkFBQSxJQUFBLENBQVA7QUFFQSxNQUFBLEdBQVMsaUJBQU0sZ0JBQUEsUUFBQSxFQUFOLE1BQU0sQ0FBTixFQUNQLFVBQUM7QUFBQyxFQUFBLEtBQUEsRUFBTyxDQUFBLFFBQUE7QUFBUixDQUFELEVBQUE7U0FBeUI7QUFBQSxJQUFBO0FBQUEsRztBQURsQixDQUFBLENBQVQ7QUFHQSxJQUFBLEdBQU8saUJBQU0sZ0JBQUEsSUFBQSxFQUFVLGlCQUFBLFNBQUEsRUFBaEIsSUFBZ0IsQ0FBVixDQUFOLEVBQ0wsVUFBQztBQUFDLEVBQUEsS0FBQSxFQUFPLEdBQUEsVUFBQTtBQUFSLENBQUQsRUFBQTtTQUE2QjtBQUFBLElBQUEsVUFBQTtBQUFhLElBQUEsSUFBQSxFQUFNLE1BQU8sVUFBVSxDQUFWLElBQUEsQ0FBRCxHQUFDO0FBQTFCLEc7QUFEeEIsQ0FBQSxDQUFQO0FBR0EsVUFBQSxHQUFhLGlCQUFNLGdC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QixFQXdCN0IsVUFBQSxDQXhCNkIsdUJBd0I3QixDQXhCNkIsRUF5QjdCLFVBQUEsQ0F6QjZCLHVCQXlCN0IsQ0F6QjZCLEVBMEI3QixVQUFBLENBMUI2Qix3QkEwQjdCLENBMUI2QixFQTJCN0IsVUFBQSxDQTNCNkIsd0JBMkI3QixDQTNCNkIsRUE0QjdCLFVBQUEsQ0E1QjZCLGtDQTRCN0IsQ0E1QjZCLEVBNkI3QixVQUFBLENBN0I2QixrQ0E2QjdCLENBN0I2QixFQThCN0IsVUFBQSxDQTlCNkIsa0NBOEI3QixDQTlCNkIsQ0FBbkIsQ0FBWixFO0FBVkYsQ0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge3ByaW50LCB0ZXN0fSBmcm9tIFwiYW1lblwiXG5cbmltcG9ydCB7cmUsIHN0cmluZywgYW55LCBvcHRpb25hbCxcbiAgbGlzdCwgYWxsLCBtYW55LCBydWxlLCBncmFtbWFyfSBmcm9tIFwiLi4vc3JjL2luZGV4XCJcblxuIyBGb3Igbm93LCBvdXIgdGVzdCBjYXNlIGlzIHNpbXBsZSBVUkwgcGFyc2VyLCB3aGljaFxuIyBleGVyY2lzZXMgYWxsIHRoZSBmdW5jdGlvbnMgZXhjZXB0IHdzXG5cbnNlcGFyYXRvciA9IHN0cmluZyBcIi9cIlxud29yZCA9IHJlIC9eXFx3Ky9cbnFkZWxpbSA9IHN0cmluZyBcIj9cIlxuY2RlbGltID0gc3RyaW5nIFwiJlwiXG5lcXVhbCA9IHN0cmluZyBcIj1cIlxucHJvdG9jb2wgPSByZSAvXmh0dHBzPy9cbnNkZWxpbSA9IHN0cmluZyBcIjpcIlxucm9vdCA9IHN0cmluZyBcIi8vXCJcblxuc2NoZW1lID0gcnVsZSAoYWxsIHByb3RvY29sLCBzZGVsaW0pLFxuICAoe3ZhbHVlOiBbcHJvdG9jb2xdfSkgLT4ge3Byb3RvY29sfVxuXG5wYXRoID0gcnVsZSAoYWxsIHJvb3QsIGxpc3Qgc2VwYXJhdG9yLCB3b3JkKSxcbiAgKHt2YWx1ZTogWywgY29tcG9uZW50c119KSAtPiB7Y29tcG9uZW50cywgcGF0aDogXCIvXCIgKyAoY29tcG9uZW50cy5qb2luIFwiL1wiKX1cblxuYXNzaWdubWVudCA9IHJ1bGUgKGFsbCB3b3JkLCBlcXVhbCwgd29yZCksXG4gICh7dmFsdWU6IFtrZXksICwgdmFsdWVdfSkgLT4gW2tleSwgdmFsdWVdXG5cbnF1ZXJ5ID0gcnVsZSAoYWxsIHFkZWxpbSwgbGlzdCBjZGVsaW0sIGFzc2lnbm1lbnQpLFxuICAoe3ZhbHVlOiBbLCBwYWlyc119KSAtPlxuICAgIHF1ZXJ5ID0ge31cbiAgICBxdWVyeVtrXSA9IHYgZm9yIFtrLCB2XSBpbiBwYWlyc1xuICAgIHtxdWVyeX1cblxudXJsID0gcnVsZSAoYWxsIHNjaGVtZSwgcGF0aCwgKG9wdGlvbmFsIHF1ZXJ5KSksXG4gICh7dmFsdWV9KSAtPiBPYmplY3QuYXNzaWduIHZhbHVlLi4uXG5cbnBhcnNlVVJMID0gZ3JhbW1hciB1cmxcblxuXG5kbyAtPlxuXG4gIHRlc3RVUkwgPSAodXJsLCBleHBlY3RlZCkgLT5cbiAgICB0ZXN0IHVybCwgLT5cbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsIHBhcnNlVVJMIHVybFxuXG4gIHRlc3RCYWRVUkwgPSAodXJsLCBleHBlY3RlZCkgLT5cbiAgICB0ZXN0IFwiQmFkIFVSTDogI3t1cmx9XCIsIC0+XG4gICAgICBhc3NlcnQuZXF1YWwgdW5kZWZpbmVkLCBwYXJzZVVSTCB1cmxcblxuICBwcmludCBhd2FpdCB0ZXN0IFwiVVJMIFBhcnNlclwiLCBbXG5cbiAgICB0ZXN0VVJMIFwiaHR0cDovL2Zvb1wiLFxuICAgICAgcHJvdG9jb2w6IFwiaHR0cFwiXG4gICAgICBwYXRoOiBcIi9mb29cIlxuICAgICAgY29tcG9uZW50czogWyBcImZvb1wiIF1cblxuICAgIHRlc3RVUkwgXCJodHRwczovL2Zvby9iYXJcIixcbiAgICAgIHByb3RvY29sOiBcImh0dHBzXCJcbiAgICAgIHBhdGg6IFwiL2Zvby9iYXJcIlxuICAgICAgY29tcG9uZW50czogWyBcImZvb1wiLCBcImJhclwiIF1cblxuICAgIHRlc3RVUkwgXCJodHRwczovL2Zvby9iYXI/YmF6PTEyM1wiLFxuICAgICAgcHJvdG9jb2w6IFwiaHR0cHNcIlxuICAgICAgcGF0aDogXCIvZm9vL2JhclwiXG4gICAgICBjb21wb25lbnRzOiBbIFwiZm9vXCIsIFwiYmFyXCIgXVxuICAgICAgcXVlcnk6IGJhejogXCIxMjNcIlxuXG4gICAgdGVzdFVSTCBcImh0dHBzOi8vZm9vL2Jhcj9iYXo9MTIzJmZpeno9YnV6elwiLFxuICAgICAgcHJvdG9jb2w6IFwiaHR0cHNcIlxuICAgICAgcGF0aDogXCIvZm9vL2JhclwiXG4gICAgICBjb21wb25lbnRzOiBbIFwiZm9vXCIsIFwiYmFyXCIgXVxuICAgICAgcXVlcnk6IGJhejogXCIxMjNcIiwgZml6ejogXCJidXp6XCJcblxuICAgIHRlc3RCYWRVUkwgXCJodHA6Ly9mb28vYmFyP2Jhej0xMjNcIlxuICAgIHRlc3RCYWRVUkwgXCJodHRwOi9mb28vYmFyP2Jhej0xMjNcIlxuICAgIHRlc3RCYWRVUkwgXCJodHRwOi8vZm9vOmJhcj9iYXo9MTIzXCJcbiAgICB0ZXN0QmFkVVJMIFwiaHR0cDovL2Zvby9iYXIsYmF6PTEyM1wiXG4gICAgdGVzdEJhZFVSTCBcImh0dHA6Ly9mb28vYmFyP2Jhej0xMjM/Zml6ej1idXp6XCJcbiAgICB0ZXN0QmFkVVJMIFwiaHR0cDovL2Zvby9iYXI/YmF6PTEyMyZmaXp6LWJ1enpcIlxuICAgIHRlc3RCYWRVUkwgXCJodHRwOi8vZm9vL2Jhcj9iYXo9MTIzJmZpenovYnV6elwiXG4gIF1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/panda-grammar/test/index.coffee