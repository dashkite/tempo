"use strict";

var _fs = _interopRequireWildcard(require("fs"));

var _path = require("path");

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _pandaParchment = require("panda-parchment");

var _index = require("../src/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var testDirectory,
    indexOf = [].indexOf;
testDirectory = (0, _path.resolve)("test", "data");

(async function () {
  (0, _amen.print)((await (0, _amen.test)("Panda Quill", [(0, _amen.test)("isReadable", function () {
    return (0, _assert.default)((0, _index.isReadable)(process.stdin));
  }), (0, _amen.test)("isWritable", function () {
    return (0, _assert.default)((0, _index.isWritable)(process.stdout));
  }), (0, _amen.test)("stat", async function () {
    var info;
    info = await (0, _index.stat)((0, _path.join)(testDirectory, "lines.txt"));
    return (0, _assert.default)(info.mode != null && info.uid != null && info.gid != null && info.size != null && info.atime != null && info.mtime != null && info.ctime != null);
  }), (0, _amen.test)("exists", async function () {
    _assert.default.equal((await (0, _index.exists)((0, _path.join)(testDirectory, "lines.txt"))), true);

    return _assert.default.equal((await (0, _index.exists)((0, _path.join)(testDirectory, "does-not-exist"))), false);
  }), (0, _amen.test)("read", function () {
    var path, target;
    path = (0, _path.join)(testDirectory, "pandas.txt");
    target = "Pandas love bamboo.\n";
    return [(0, _amen.test)("files", async function () {
      return (0, _assert.default)((await (0, _index.read)(path)) === target);
    }), (0, _amen.test)("buffer", async function () {
      return (0, _assert.default)((await (0, _index.read)(path, "buffer")).toString() === target);
    }), (0, _amen.test)("streams", async function () {
      var stream;
      stream = _fs.default.createReadStream(path);
      return (0, _assert.default)((await (0, _index.read)(stream)) === target);
    })];
  }()), (0, _amen.test)("write", function () {
    return [(0, _amen.test)("string", async function () {
      var currentTime, path;
      path = (0, _path.join)(testDirectory, "time.txt");
      currentTime = Date.now().toString();
      await (0, _index.write)(path, currentTime);
      return (0, _assert.default)((await (0, _index.read)(path)) === currentTime);
    }), (0, _amen.test)("buffer", async function () {
      var path, sampleText;
      path = (0, _path.join)(testDirectory, "buffer.txt");
      sampleText = "Pandas love bamboo.";
      await (0, _index.write)(path, Buffer.from(sampleText));
      return (0, _assert.default)((await (0, _index.read)(path)) === sampleText);
    }), (0, _amen.test)("stream")];
  }()), (0, _amen.test)("readDir", async function () {
    var files;
    files = await (0, _index.readDir)(testDirectory);
    (0, _assert.default)(indexOf.call(files, "lines.txt") >= 0);
    return (0, _assert.default)(indexOf.call(files, "pandas.txt") >= 0);
  }), (0, _amen.test)("ls", async function () {
    var paths, ref, ref1;
    paths = await (0, _index.ls)(testDirectory);
    (0, _assert.default)((ref = (0, _path.join)(testDirectory, "lines.txt"), indexOf.call(paths, ref) >= 0));
    return (0, _assert.default)((ref1 = (0, _path.join)(testDirectory, "pandas.txt"), indexOf.call(paths, ref1) >= 0));
  }), (0, _amen.test)("lsR", async function () {
    var paths, ref, ref1, ref2;
    paths = await (0, _index.lsR)(testDirectory);
    (0, _assert.default)((ref = (0, _path.join)(testDirectory, "lines.txt"), indexOf.call(paths, ref) >= 0));
    (0, _assert.default)((ref1 = (0, _path.join)(testDirectory, "pandas.txt"), indexOf.call(paths, ref1) >= 0));
    return (0, _assert.default)((ref2 = (0, _path.join)(testDirectory, "lsr", "pandas.txt"), indexOf.call(paths, ref2) >= 0));
  }), (0, _amen.test)("rmR", function () {
    // minimal test here, just make sure fn is exported
    (0, _assert.default)((0, _pandaParchment.isFunction)(_index.rmr));
    return (0, _assert.default)((0, _pandaParchment.isFunction)(_index.rmR));
  }), (0, _amen.test)("glob", async function () {
    var paths, ref, ref1, ref2, ref3, ref4, ref5;
    paths = await (0, _index.glob)("**/*.txt", testDirectory);
    (0, _assert.default)((ref = (0, _path.join)(testDirectory, "lines.txt"), indexOf.call(paths, ref) >= 0));
    (0, _assert.default)((ref1 = (0, _path.join)(testDirectory, "pandas.txt"), indexOf.call(paths, ref1) >= 0));
    (0, _assert.default)((ref2 = (0, _path.join)(testDirectory, "lsr", "pandas.txt"), indexOf.call(paths, ref2) >= 0));
    paths = await (0, _index.glob)("data/*.txt", (0, _path.resolve)("test"));
    (0, _assert.default)((ref3 = (0, _path.join)(testDirectory, "lines.txt"), indexOf.call(paths, ref3) >= 0));
    (0, _assert.default)((ref4 = (0, _path.join)(testDirectory, "pandas.txt"), indexOf.call(paths, ref4) >= 0));
    return (0, _assert.default)(!(ref5 = (0, _path.join)(testDirectory, "lsr", "pandas.txt"), indexOf.call(paths, ref5) >= 0));
  }), (0, _amen.test)("chdir", function () {
    var cwd;
    cwd = process.cwd();
    return [(0, _amen.test)("with restore", function () {
      var restore;
      restore = (0, _index.chdir)(testDirectory);
      (0, _assert.default)(process.cwd() === testDirectory);
      (0, _assert.default)(restore.call != null);
      restore();
      return (0, _assert.default)(process.cwd() === cwd);
    }), (0, _amen.test)("with function", function () {
      var wd;
      wd = void 0;
      (0, _index.chdir)(testDirectory, function () {
        return wd = process.cwd();
      });
      (0, _assert.default)(wd === testDirectory);
      return (0, _assert.default)(process.cwd() === cwd);
    })];
  }()), (0, _amen.test)("mv", async function () {
    var from, to;
    from = (0, _path.join)(testDirectory, "mv", "pandas.txt");
    to = (0, _path.join)(testDirectory, "mv", "bamboo.txt"); // move from -> to

    await (0, _index.mv)(from, to);
    (0, _assert.default)(!(await (0, _index.exist)(from)));
    (0, _assert.default)((await (0, _index.exist)(to))); // now reverse it

    await (0, _index.mv)(to, from);
    (0, _assert.default)(!(await (0, _index.exist)(to)));
    return (0, _assert.default)((await (0, _index.exist)(from)));
  }), (0, _amen.test)("cp/rm", async function () {
    var from, to;
    from = (0, _path.join)(testDirectory, "pandas.txt");
    to = (0, _path.join)(testDirectory, "bamboo.txt"); // cp from -> to

    await (0, _index.cp)(from, to);
    (0, _assert.default)((await (0, _index.exist)(from)));
    (0, _assert.default)((await (0, _index.exist)(to))); // now reverse it

    await (0, _index.rm)(to);
    return (0, _assert.default)(!(await (0, _index.exist)(to)));
  }), (0, _amen.test)("mkDir/rmDir", async function () {
    var path;
    path = (0, _path.join)(testDirectory, "mkdir");
    await (0, _index.mkDir)("0777", path);
    (0, _assert.default)((await (0, _index.exist)(path)));
    await (0, _index.rmDir)(path);
    return (0, _assert.default)(!(await (0, _index.exist)(path)));
  }), (0, _amen.test)("mkDirP", async function () {
    var path;
    path = (0, _path.join)(testDirectory, "mkdirp", "nested");
    await (0, _index.mkDirP)("0777", path);
    (0, _assert.default)((await (0, _index.exist)(path))); // cleanup

    await (0, _index.rmDir)((0, _path.join)(testDirectory, "mkdirp", "nested"));
    await (0, _index.rmDir)((0, _path.join)(testDirectory, "mkdirp"));
    return (0, _assert.default)(!(await (0, _index.exist)(path)));
  }), (0, _amen.test)("isDirectory", async function () {
    var path;
    path = (0, _path.join)(testDirectory, "pandas.txt");
    (0, _assert.default)((await (0, _index.isDirectory)(testDirectory)));
    return (0, _assert.default)(!(await (0, _index.isDirectory)(path)));
  }), (0, _amen.test)("isFile", async function () {
    var path;
    path = (0, _path.join)(testDirectory, "pandas.txt");
    (0, _assert.default)((await (0, _index.isFile)(path)));
    return (0, _assert.default)(!(await (0, _index.isFile)(testDirectory)));
  }), (0, _amen.test)("abort", function () {
    return (0, _assert.default)((0, _pandaParchment.isFunction)(_index.abort));
  }), (0, _amen.test)("print", function () {
    return (0, _assert.default)((0, _pandaParchment.isFunction)(_index.print));
  }), (0, _amen.test)("run", async function () {
    return _assert.default.equal("hello", (await (0, _index.run)("bash -c 'echo -n hello'")).stdout);
  })])));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-quill/test/index.coffee