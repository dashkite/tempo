"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoize = exports.given = exports.rtee = exports.tee = exports.once = exports.negate = exports.apply = exports.flow = exports.wait = exports.spread = exports.pipe = exports.compose = exports.flip = exports.partial = exports.substitute = exports._ = exports.curry = exports.ternary = exports.binary = exports.unary = exports.arity = exports.wrap = exports.identity = exports.noOp = void 0;

var _,
    apply,
    arity,
    binary,
    compose,
    curry,
    flip,
    flow,
    given,
    identity,
    memoize,
    negate,
    noOp,
    once,
    partial,
    pipe,
    rtee,
    spread,
    substitute,
    tee,
    ternary,
    unary,
    wait,
    wrap,
    splice = [].splice;

exports.wrap = wrap;
exports.wait = wait;
exports.unary = unary;
exports.ternary = ternary;
exports.tee = tee;
exports.substitute = substitute;
exports.spread = spread;
exports.rtee = rtee;
exports.pipe = pipe;
exports.partial = partial;
exports.once = once;
exports.noOp = noOp;
exports.negate = negate;
exports.memoize = memoize;
exports.identity = identity;
exports.given = given;
exports.flow = flow;
exports.flip = flip;
exports.curry = curry;
exports.compose = compose;
exports.binary = binary;
exports.arity = arity;
exports.apply = apply;
exports._ = _;

exports.noOp = noOp = function () {};

exports.identity = identity = function (x) {
  return x;
};

exports.wrap = wrap = function (x) {
  return function () {
    return x;
  };
}; // Based on _arity from Rambda: https://github.com/ramda/ramda/blob/v0.26.1/source/internal/_arity.js 


exports.arity = arity = function (N, f) {
  switch (N) {
    case 0:
      return function () {
        return f.apply(this, arguments);
      };

    case 1:
      return function (a0) {
        return f.apply(this, arguments);
      };

    case 2:
      return function (a0, a1) {
        return f.apply(this, arguments);
      };

    case 3:
      return function (a0, a1, a2) {
        return f.apply(this, arguments);
      };

    case 4:
      return function (a0, a1, a2, a3) {
        return f.apply(this, arguments);
      };

    case 5:
      return function (a0, a1, a2, a3, a4) {
        return f.apply(this, arguments);
      };

    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return f.apply(this, arguments);
      };

    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return f.apply(this, arguments);
      };

    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return f.apply(this, arguments);
      };

    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return f.apply(this, arguments);
      };

    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return f.apply(this, arguments);
      };

    default:
      throw new Error("First argument to arity must be a non-negative integer no greater than ten");
  }
};

exports.unary = unary = function (f) {
  return arity(1, f);
};

exports.binary = binary = function (f) {
  return arity(2, f);
};

exports.ternary = ternary = function (f) {
  return arity(3, f);
};

exports.curry = curry = function (f) {
  return arity(f.length, function (...ax) {
    var length;

    if (ax.length >= f.length) {
      return f(...ax);
    } else {
      length = f.length - ax.length;

      if (length === 1) {
        return function (x) {
          return f(...ax, x);
        };
      } else {
        return curry(arity(length, function (...bx) {
          return f(...ax, ...bx);
        }));
      }
    }
  });
};

exports._ = _ = {};
exports.substitute = substitute = curry(function (ax, bx) {
  var a, i, j, len, results;
  i = 0;
  results = [];

  for (j = 0, len = ax.length; j < len; j++) {
    a = ax[j];

    if (a === _) {
      results.push(bx[i++]);
    } else {
      results.push(a);
    }
  }

  return results;
});

exports.partial = partial = function (f, ...ax) {
  return function (...bx) {
    return f(...substitute(ax, bx));
  };
};

exports.flip = flip = function (f) {
  switch (f.length) {
    case 1:
      return f;

    case 2:
      return function (y, x) {
        return f(x, y);
      };

    case 3:
      return function (z, y, x) {
        return f(x, y, z);
      };

    default:
      return function (...ax) {
        return f(...ax.reverse());
      };
  }
};

exports.compose = compose = function (...fx) {
  var f, g, ref;
  ref = fx, [...fx] = ref, [f] = splice.call(fx, -1);

  if (fx.length === 0) {
    return f;
  } else {
    g = compose(...fx);
    return function (...ax) {
      var fax, ref1;

      if (((ref1 = fax = f(...ax)) != null ? ref1.then : void 0) != null) {
        return fax.then(g);
      } else {
        return g(fax);
      }
    };
  }
};

exports.pipe = pipe = flip(compose);

exports.spread = spread = function (f) {
  return function (ax) {
    return f(...ax);
  };
};

exports.wait = wait = function (f) {
  return function (x) {
    if ((x != null ? x.then : void 0) != null) {
      return x.then(function (a) {
        return f(a);
      });
    } else {
      return f(x);
    }
  };
};

exports.flow = flow = function (...fx) {
  var ref;

  if (fx.length === 0) {
    return void 0;
  } else if (fx.length === 1 && fx[0] == null) {
    return void 0;
  } else if (fx.length === 1 && ((ref = fx[0]) != null ? ref[Symbol.iterator] : void 0) != null) {
    return flow(...fx[0]);
  } else {
    return function (...ax) {
      var g, gx, j, len, result, start;
      [start, ...gx] = fx;
      result = start(...ax);

      for (j = 0, len = gx.length; j < len; j++) {
        g = gx[j];
        result = wait(g)(result);
      }

      return result;
    };
  }
};

exports.apply = apply = function (f, ...args) {
  return f(...args);
};

exports.negate = negate = function (f) {
  return function () {
    return !f(...arguments);
  };
};

exports.given = given = function (...args) {
  var f, ref;
  ref = args, [...args] = ref, [f] = splice.call(args, -1);
  return f(...args);
};

exports.tee = tee = function (f) {
  return arity(Math.max(f.length, 1), function (a, ...bx) {
    var k, ref;

    if (((ref = k = f(a, ...bx)) != null ? ref.then : void 0) != null) {
      return k.then(function () {
        return a;
      });
    } else {
      return a;
    }
  });
};

exports.rtee = rtee = function (f) {
  return arity(Math.max(f.length, 1), function (...ax) {
    var b, k, ref, ref1;
    ref = ax, [...ax] = ref, [b] = splice.call(ax, -1);

    if (((ref1 = k = f(...ax, b)) != null ? ref1.then : void 0) != null) {
      return k.then(function () {
        return b;
      });
    } else {
      return b;
    }
  });
};

exports.once = once = function (f) {
  return function (k) {
    return function () {
      if (k != null) {
        return k;
      } else {
        return k = f();
      }
    };
  }(void 0);
};

exports.memoize = memoize = function (f) {
  return function (cache) {
    return function (...args) {
      return cache[args] != null ? cache[args] : cache[args] = f(...args);
    };
  }({});
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-garden/src/index.coffee