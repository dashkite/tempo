"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _array = require("../src/array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var indexOf = [].indexOf;

(async function () {
  // import sinon from "sinon"
  return (0, _amen.print)((await (0, _amen.test)("array helpers", [(0, _amen.test)("first", function () {
    return (0, _assert.default)((0, _array.first)([1, 2, 3, 4, 5]) === 1);
  }), (0, _amen.test)("second", function () {
    return (0, _assert.default)((0, _array.second)([1, 2, 3, 4, 5]) === 2);
  }), (0, _amen.test)("third", function () {
    return (0, _assert.default)((0, _array.third)([1, 2, 3, 4, 5]) === 3);
  }), (0, _amen.test)("fourth", function () {
    return (0, _assert.default)((0, _array.fourth)([1, 2, 3, 4, 5]) === 4);
  }), (0, _amen.test)("fifth", function () {
    return (0, _assert.default)((0, _array.fifth)([1, 2, 3, 4, 5]) === 5);
  }), (0, _amen.test)("nth", function () {
    return (0, _assert.default)((0, _array.nth)(3, [1, 2, 3, 4, 5]) === 3);
  }), (0, _amen.test)("last", function () {
    return (0, _assert.default)((0, _array.last)([1, 2, 3, 4, 5]) === 5);
  }), (0, _amen.test)("rest", function () {
    return (0, _assert.default)((0, _array.first)((0, _array.rest)([1, 2, 3, 4, 5])) === 2);
  }), (0, _amen.test)("includes", function () {
    return (0, _assert.default)((0, _array.includes)(3, [1, 2, 3, 4, 5]) && !(0, _array.includes)(6, [1, 2, 3, 4, 5]));
  }), (0, _amen.test)("findIndexOf", function () {
    (0, _assert.default)((0, _array.findIndexOf)(2, [1, 2, 3]) === 1);
    return (0, _assert.default)((0, _array.findIndexOf)(4, [1, 2, 3]) === void 0);
  }), (0, _amen.test)("findLastIndexOf", function () {
    (0, _assert.default)((0, _array.findLastIndexOf)(2, [1, 2, 2, 3]) === 2);
    return (0, _assert.default)((0, _array.findLastIndexOf)(4, [1, 2,, 2, 3]) === void 0);
  }), (0, _amen.test)("push/enqueue", function () {
    return _assert.default.deepEqual((0, _array.push)([1, 2, 3, 4], 5), [1, 2, 3, 4, 5]);
  }), (0, _amen.test)("pop/dequeue", function () {
    return (0, _assert.default)((0, _array.pop)([1, 2, 3, 4, 5]) === 5);
  }), (0, _amen.test)("shift", function () {
    var A;
    A = [1, 2, 3];
    (0, _assert.default)((0, _array.shift)(A) === 1);
    return _assert.default.deepEqual(A, [2, 3]);
  }), (0, _amen.test)("unshift", function () {
    var A;
    A = [1, 2, 3];
    (0, _assert.default)((0, _array.unshift)(A, 0) === 4);
    return _assert.default.deepEqual(A, [0, 1, 2, 3]);
  }), (0, _amen.test)("cat", function () {
    return _assert.default.deepEqual((0, _array.cat)([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
  }), (0, _amen.test)("slice", function () {
    _assert.default.deepEqual((0, _array.slice)(1, 2, [1, 2, 3, 4, 5]), [2]);

    _assert.default.deepEqual((0, _array.slice)(2, 5, [1, 2, 3, 4, 5]), [3, 4, 5]);

    _assert.default.deepEqual((0, _array.slice)(1, -2, [1, 2, 3, 4, 5]), [2, 3]);

    _assert.default.deepEqual((0, _array.slice)(-3, -1, [1, 2, 3, 4, 5]), [3, 4]);

    return _assert.default.deepEqual((0, _array.slice)(-3, -1, "0123456789"), "78");
  }), (0, _amen.test)("splice", function () {
    var A;
    A = [1, 2, 3, 4, 5];

    _assert.default.deepEqual((0, _array.splice)(0, 0, A), [1, 2, 3, 4, 5]);

    _assert.default.deepEqual((0, _array.splice)(0, 1, A), [2, 3, 4, 5]);

    _assert.default.deepEqual((0, _array.splice)(2, 2, A), [2, 3]);

    return _assert.default.deepEqual(A, [2, 3]);
  }), (0, _amen.test)("uniqueBy", function () {
    var mod3;

    mod3 = function (x) {
      return x % 3;
    };

    return _assert.default.deepEqual((0, _array.uniqueBy)(mod3, [1, 2, 3, 4, 5]), [1, 2, 0]);
  }), (0, _amen.test)("unique", function () {
    return _assert.default.deepEqual((0, _array.unique)([...[1, 2, 3, 4], ...[4, 3, 2, 1]]), [1, 2, 3, 4]);
  }), (0, _amen.test)("dupes", function () {
    return _assert.default.deepEqual((0, _array.dupes)([...[1, 2, 3], ...[2, 1]]), [1, 2]);
  }), (0, _amen.test)("union", function () {
    return _assert.default.deepEqual((0, _array.union)([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
  }), (0, _amen.test)("intersection", function () {
    return _assert.default.deepEqual((0, _array.intersection)([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9, 10]), [4, 5, 6]);
  }), (0, _amen.test)("difference", function () {
    return _assert.default.deepEqual((0, _array.difference)([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 10]);
  }), (0, _amen.test)("complement", function () {
    return _assert.default.deepEqual((0, _array.complement)([1, 2, 3, 4, 5], [3, 4, 5, 6]), [1, 2]);
  }), (0, _amen.test)("insert", function () {
    _assert.default.deepEqual((0, _array.insert)([4, 2, 1], 3, 1), [4, 3, 2, 1]);

    _assert.default.deepEqual((0, _array.insert)([1, 2, 4], 3, -1), [1, 2, 3, 4]);

    return _assert.default.deepEqual((0, _array.insert)([2, 3, 4], 1, 0), [1, 2, 3, 4]);
  }), (0, _amen.test)("remove", function () {
    _assert.default.deepEqual((0, _array.remove)([1, 2, 3, 4, 5], 3), [1, 2, 4, 5]);

    return _assert.default.deepEqual((0, _array.remove)([1, 2, 3, 4, 5], 6), [1, 2, 3, 4, 5]);
  }), (0, _amen.test)("range", function () {
    _assert.default.deepEqual((0, _array.range)(1, 5), [1, 2, 3, 4, 5]);

    return _assert.default.deepEqual((0, _array.range)(5, 1), [5, 4, 3, 2, 1]);
  }), (0, _amen.test)("join", function () {
    var A;
    A = ["water", "earth", "fire", "air"];
    return (0, _assert.default)((0, _array.join)(A, "-") === "water-earth-fire-air");
  }), (0, _amen.test)("fill", function () {
    var A;
    A = [1, 2, 3, 4];

    _assert.default.deepEqual((0, _array.fill)(A, 2), [2, 2, 2, 2]);

    return _assert.default.deepEqual((0, _array.fill)(A, 5), [5, 5, 5, 5]);
  }), (0, _amen.test)("pluck", function () {
    var A, ref;
    A = [1, 2, 3, 4, 5];
    (0, _assert.default)((ref = (0, _array.pluck)(A), indexOf.call(A, ref) >= 0));
    return (0, _assert.default)(A.length === 5);
  }), (0, _amen.test)("pair", function () {
    return _assert.default.deepEqual((0, _array.pair)(1, 2), [1, 2]);
  })])));
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-parchment/test/array.coffee