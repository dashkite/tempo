"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _clone = require("../src/clone");

var _equal = require("../src/equal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async function () {
  return (0, _amen.print)((await (0, _amen.test)("clone", function (scenario) {
    var failScenario;

    scenario = function (original) {
      return function () {
        var copy;
        copy = (0, _clone.clone)(original);
        (0, _assert.default)(original !== copy);
        return _assert.default.deepEqual(original, copy);
      };
    };

    failScenario = function (original) {
      return function () {
        try {
          (0, _clone.clone)(original);
          return _assert.default.fail("clone should not have succeeded for this example");
        } catch (error) {}
      };
    };

    return [(0, _amen.test)("shallow", function () {
      return _assert.default.deepEqual("panda", (0, _clone.clone)("panda"));
    }), (0, _amen.test)("deep", scenario({
      x: 1,
      y: {
        z: {
          a: {
            b: {
              c: 12
            }
          }
        }
      }
    })), (0, _amen.test)("number", scenario({
      x: 1,
      y: {
        z: 3
      }
    })), (0, _amen.test)("NaN", function () {
      return (0, _assert.default)(isNaN((0, _clone.clone)(0 / 0)));
    }), (0, _amen.test)("string", scenario({
      x: 1,
      y: {
        z: "3"
      }
    })), (0, _amen.test)("boolean", scenario({
      x: 1,
      y: {
        z: true
      }
    })), (0, _amen.test)("regexp", scenario({
      x: 1,
      y: {
        z: /foo/gi
      }
    })), (0, _amen.test)("date", scenario({
      x: 1,
      y: {
        z: new Date()
      }
    })), (0, _amen.test)("symbol", scenario({
      x: 1,
      y: {
        z: [Symbol("z")]
      }
    })), (0, _amen.test)("array", scenario({
      x: 1,
      y: {
        z: [1, 2, 3]
      }
    })), (0, _amen.test)("set", scenario({
      x: 1,
      y: {
        z: new Set([1, 2, 3])
      }
    })), (0, _amen.test)("map", function () {
      var map;
      map = new Map();
      map.set("pandas", "are the best");
      return scenario({
        x: 1,
        y: {
          z: map
        }
      });
    }), (0, _amen.test)("buffer", scenario({
      x: 1,
      y: {
        z: Buffer.from("panda")
      }
    })), (0, _amen.test)("array buffer", scenario({
      x: 1,
      y: {
        z: new ArrayBuffer(8)
      }
    })), (0, _amen.test)("data view", scenario({
      x: 1,
      y: {
        z: new DataView(new ArrayBuffer(8))
      }
    })), // Negative tests
    (0, _amen.test)("function", failScenario({
      x: 1,
      y: {
        z: function () {}
      }
    })), (0, _amen.test)("weak map", failScenario({
      x: 1,
      y: {
        z: new WeakMap()
      }
    })), (0, _amen.test)("error", failScenario({
      x: 1,
      y: {
        z: new Error("panda")
      }
    }))];
  }(null))));
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1wYXJjaG1lbnQvdGVzdC9jbG9uZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVHLENBQUEsa0JBQUE7U0FFRCxrQkFBTSxNQUFNLGdCQUFBLE9BQUEsRUFBaUIsVUFBQSxRQUFBLEVBQUE7QUFFM0IsUUFBQSxZQUFBOztBQUFBLElBQUEsUUFBQSxHQUFXLFVBQUEsUUFBQSxFQUFBO2FBQ1QsWUFBQTtBQUNFLFlBQUEsSUFBQTtBQUFBLFFBQUEsSUFBQSxHQUFPLGtCQUFBLFFBQUEsQ0FBUDtBQUNBLDZCQUFPLFFBQUEsS0FBUCxJQUFBO2VBQ0EsZ0JBQUEsU0FBQSxDQUFBLFFBQUEsRUFBQSxJQUFBLEM7QUFIRixPO0FBRFMsS0FBWDs7QUFNQSxJQUFBLFlBQUEsR0FBZSxVQUFBLFFBQUEsRUFBQTthQUNiLFlBQUE7QUFDRSxZQUFBO0FBQ0UsNEJBQUEsUUFBQTtpQkFDQSxnQkFBQSxJQUFBLENBRkYsa0RBRUUsQztBQUZGLFNBQUEsQ0FBQSxPQUFBLEtBQUEsRUFBQSxDO0FBREYsTztBQURhLEtBQWY7O1dBUUEsQ0FDRSxnQkFBQSxTQUFBLEVBQWdCLFlBQUE7YUFBRyxnQkFBQSxTQUFBLENBQUEsT0FBQSxFQUEwQixrQkFBMUIsT0FBMEIsQ0FBMUIsQztBQURyQixLQUNFLENBREYsRUFFRSxnQkFBQSxNQUFBLEVBQWEsUUFBQSxDQUFTO0FBQUEsTUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFNLE1BQUEsQ0FBQSxFQUFHO0FBQUUsUUFBQSxDQUFBLEVBQUc7QUFBQyxVQUFBLENBQUEsRUFBRztBQUFDLFlBQUEsQ0FBQSxFQUFHO0FBQUMsY0FBQSxDQUFBLEVBQUc7QUFBSjtBQUFKO0FBQUo7QUFBTDtBQUFULEtBQVQsQ0FBYixDQUZGLEVBSUUsZ0JBQUEsUUFBQSxFQUFlLFFBQUEsQ0FBUztBQUFBLE1BQUEsQ0FBQSxFQUFBLENBQUE7QUFBTSxN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LENBckJGLEU7QUF3QkUsb0JBQUEsVUFBQSxFQUFpQixZQUFBLENBQWE7QUFBQSxNQUFBLENBQUEsRUFBQSxDQUFBO0FBQU0sTUFBQSxDQUFBLEVBQUc7QUFBRSxRQUFBLENBQUEsRUFBRyxZQUFBLENBQUE7QUFBTDtBQUFULEtBQWIsQ0FBakIsQ0F4QkYsRUF5QkUsZ0JBQUEsVUFBQSxFQUFpQixZQUFBLENBQWE7QUFBQSxNQUFBLENBQUEsRUFBQSxDQUFBO0FBQU0sTUFBQSxDQUFBLEVBQUc7QUFBRSxRQUFBLENBQUEsRUFBRyxJQUFBLE9BQUE7QUFBTDtBQUFULEtBQWIsQ0FBakIsQ0F6QkYsRUEwQkUsZ0JBQUEsT0FBQSxFQUFjLFlBQUEsQ0FBYTtBQUFBLE1BQUEsQ0FBQSxFQUFBLENBQUE7QUFBTSxNQUFBLENBQUEsRUFBRztBQUFFLFFBQUEsQ0FBQSxFQUFHLElBQUEsS0FBQSxDQUFBLE9BQUE7QUFBTDtBQUFULEtBQWIsQ0FBZCxDQTFCRixDO0FBaEJ3QixHQUFHLENBQTdCLElBQTZCLENBQWpCLENBQVosRTtBQUZGLENBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIlxuaW1wb3J0IHt0ZXN0LCBwcmludH0gZnJvbSBcImFtZW5cIlxuXG5pbXBvcnQge2Nsb25lfSBmcm9tIFwiLi4vc3JjL2Nsb25lXCJcbmltcG9ydCB7ZXF1YWx9IGZyb20gXCIuLi9zcmMvZXF1YWxcIlxuXG5kbyAtPlxuXG4gIHByaW50IGF3YWl0IHRlc3QgXCJjbG9uZVwiLCBkbyAoc2NlbmFyaW89bnVsbCkgLT5cblxuICAgIHNjZW5hcmlvID0gKG9yaWdpbmFsKSAtPlxuICAgICAgLT5cbiAgICAgICAgY29weSA9IGNsb25lIG9yaWdpbmFsXG4gICAgICAgIGFzc2VydCBvcmlnaW5hbCAhPSBjb3B5XG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwgb3JpZ2luYWwsIGNvcHlcblxuICAgIGZhaWxTY2VuYXJpbyA9IChvcmlnaW5hbCkgLT5cbiAgICAgIC0+XG4gICAgICAgIHRyeVxuICAgICAgICAgIGNsb25lIG9yaWdpbmFsXG4gICAgICAgICAgYXNzZXJ0LmZhaWwgXCJjbG9uZSBzaG91bGQgbm90IGhhdmUgc3VjY2VlZGVkIGZvciB0aGlzIGV4YW1wbGVcIlxuICAgICAgICBjYXRjaFxuICAgICAgICAgIHJldHVyblxuXG4gICAgW1xuICAgICAgdGVzdCBcInNoYWxsb3dcIiwgLT4gYXNzZXJ0LmRlZXBFcXVhbCBcInBhbmRhXCIsIGNsb25lIFwicGFuZGFcIlxuICAgICAgdGVzdCBcImRlZXBcIiwgc2NlbmFyaW8geDogMSwgeTogeyB6OiB7YToge2I6IHtjOiAxMn19fSB9XG5cbiAgICAgIHRlc3QgXCJudW1iZXJcIiwgc2NlbmFyaW8geDogMSwgeTogeyB6OiAzIH1cbiAgICAgIHRlc3QgXCJOYU5cIiwgLT4gYXNzZXJ0IGlzTmFOIGNsb25lIE5hTlxuICAgICAgdGVzdCBcInN0cmluZ1wiLCBzY2VuYXJpbyB4OiAxLCB5OiB7IHo6IFwiM1wiIH1cbiAgICAgIHRlc3QgXCJib29sZWFuXCIsIHNjZW5hcmlvIHg6IDEsIHk6IHsgejogdHJ1ZSB9XG5cbiAgICAgIHRlc3QgXCJyZWdleHBcIiwgc2NlbmFyaW8gIHg6IDEsIHk6IHsgejogL2Zvby9naSB9XG4gICAgICB0ZXN0IFwiZGF0ZVwiLCBzY2VuYXJpbyAgeDogMSwgeTogeyB6OiBuZXcgRGF0ZSgpIH1cbiAgICAgIHRlc3QgXCJzeW1ib2xcIiwgc2NlbmFyaW8gIHg6IDEsIHk6IHsgejogW1N5bWJvbCBcInpcIl0gfVxuXG4gICAgICB0ZXN0IFwiYXJyYXlcIiwgc2NlbmFyaW8geDogMSwgeTogeyB6OiBbMSwgMiwgM10gfVxuICAgICAgdGVzdCBcInNldFwiLCBzY2VuYXJpbyB4OiAxLCB5OiB7IHo6IG5ldyBTZXQgWzEsIDIsIDNdIH1cbiAgICAgIHRlc3QgXCJtYXBcIiwgLT5cbiAgICAgICAgbWFwID0gbmV3IE1hcCgpXG4gICAgICAgIG1hcC5zZXQgXCJwYW5kYXNcIiwgXCJhcmUgdGhlIGJlc3RcIlxuICAgICAgICBzY2VuYXJpbyB4OiAxLCB5OiB7IHo6IG1hcCB9XG4gICAgICB0ZXN0IFwiYnVmZmVyXCIsIHNjZW5hcmlvIHg6IDEsIHk6IHsgejogQnVmZmVyLmZyb20gXCJwYW5kYVwiIH1cbiAgICAgIHRlc3QgXCJhcnJheSBidWZmZXJcIiwgc2NlbmFyaW8geDogMSwgeTogeyB6OiBuZXcgQXJyYXlCdWZmZXIgOCB9XG4gICAgICB0ZXN0IFwiZGF0YSB2aWV3XCIsIHNjZW5hcmlvIHg6IDEsIHk6IHsgejogbmV3IERhdGFWaWV3IG5ldyBBcnJheUJ1ZmZlciA4IH1cblxuICAgICAgIyBOZWdhdGl2ZSB0ZXN0c1xuICAgICAgdGVzdCBcImZ1bmN0aW9uXCIsIGZhaWxTY2VuYXJpbyB4OiAxLCB5OiB7IHo6IC0+IH1cbiAgICAgIHRlc3QgXCJ3ZWFrIG1hcFwiLCBmYWlsU2NlbmFyaW8geDogMSwgeTogeyB6OiBuZXcgV2Vha01hcCgpIH1cbiAgICAgIHRlc3QgXCJlcnJvclwiLCBmYWlsU2NlbmFyaW8geDogMSwgeTogeyB6OiBuZXcgRXJyb3IgXCJwYW5kYVwiIH1cbiAgICBdXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/repos/panda-parchment/test/clone.coffee