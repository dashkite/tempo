"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _type = require("../src/type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async function () {
  return (0, _amen.print)((await (0, _amen.test)("type helpers", [(0, _amen.test)("prototype", [// isType and isKind relies on prototype
  (0, _amen.test)("isKind", function () {
    var A, B, b;
    A = {
      prototype: {}
    };
    B = {
      prototype: Object.create(A.prototype)
    };
    b = Object.create(B.prototype);
    (0, _assert.default)((0, _type.isKind)(B, b));
    (0, _assert.default)((0, _type.isKind)(A, b));
    return (0, _assert.default)(!(0, _type.isKind)(A, {}));
  }), (0, _amen.test)("isType", [// these are all defined using isType
  (0, _amen.test)("isNumber", function () {
    (0, _assert.default)((0, _type.isNumber)(7));
    (0, _assert.default)(!(0, _type.isNumber)("7"));
    (0, _assert.default)(!(0, _type.isNumber)(false));
    return (0, _assert.default)(_type.isNumber.length === 1);
  }), (0, _amen.test)("isBoolean", function () {
    (0, _assert.default)((0, _type.isBoolean)(true));
    return (0, _assert.default)(!(0, _type.isBoolean)(7));
  }), (0, _amen.test)("isDate", function () {
    (0, _assert.default)((0, _type.isDate)(new Date()));
    return (0, _assert.default)(!(0, _type.isDate)(7));
  }), (0, _amen.test)("isRegExp", function () {
    (0, _assert.default)((0, _type.isRegExp)(/\s/));
    return (0, _assert.default)(!(0, _type.isRegExp)(7));
  }), (0, _amen.test)("isString", function () {
    (0, _assert.default)((0, _type.isString)("x"));
    return (0, _assert.default)(!(0, _type.isString)(7));
  }), (0, _amen.test)("isBuffer", function () {
    return (0, _assert.default)((0, _type.isBuffer)(Buffer.from("hello")));
  }), (0, _amen.test)("isFunction", function () {
    (0, _assert.default)((0, _type.isFunction)(function () {}));
    (0, _assert.default)(!(0, _type.isFunction)(7));
    return (0, _assert.default)(_type.isFunction.length === 1);
  }), (0, _amen.test)("isObject", function () {
    (0, _assert.default)((0, _type.isObject)({}));
    return (0, _assert.default)(!(0, _type.isObject)(7));
  }), (0, _amen.test)("isArray", function () {
    (0, _assert.default)((0, _type.isArray)([]));
    return (0, _assert.default)(!(0, _type.isArray)(7));
  }), (0, _amen.test)("isNaN", function () {
    (0, _assert.default)((0, _type.isNaN)(0 / 0));
    (0, _assert.default)(!(0, _type.isNaN)(0));
    return (0, _assert.default)(!(0, _type.isNaN)("foobar"));
  }), (0, _amen.test)("isFinite", function () {
    (0, _assert.default)((0, _type.isFinite)(0));
    (0, _assert.default)((0, _type.isFinite)(2e64));
    (0, _assert.default)(!(0, _type.isFinite)("0"));
    (0, _assert.default)(!(0, _type.isFinite)(null));
    (0, _assert.default)(!(0, _type.isFinite)(2e308));
    (0, _assert.default)(!(0, _type.isFinite)(0 / 0));
    return (0, _assert.default)(!(0, _type.isFinite)(-2e308));
  }), (0, _amen.test)("isInteger", function () {
    (0, _assert.default)((0, _type.isInteger)(5));
    (0, _assert.default)(!(0, _type.isInteger)(3.5));
    (0, _assert.default)(!(0, _type.isInteger)("5"));
    return (0, _assert.default)(!(0, _type.isInteger)(0 / 0));
  }), (0, _amen.test)("isFloat", function () {
    (0, _assert.default)((0, _type.isFloat)(3.5));
    (0, _assert.default)(!(0, _type.isFloat)(5));
    (0, _assert.default)(!(0, _type.isFloat)("3.5"));
    return (0, _assert.default)(!(0, _type.isFloat)(0 / 0));
  }), (0, _amen.test)("isDefined", function () {
    (0, _assert.default)((0, _type.isDefined)({}));
    return (0, _assert.default)(!(0, _type.isDefined)(void 0));
  }), (0, _amen.test)("isGeneratorFunction", function () {
    var f;

    f = function* () {
      return yield true;
    };

    return (0, _assert.default)((0, _type.isGeneratorFunction)(f));
  }), (0, _amen.test)("isAsyncFunction", function () {
    var f;

    f = async function () {
      return await true;
    };

    return (0, _assert.default)((0, _type.isAsyncFunction)(f));
  })]), (0, _amen.test)("Type", function () {
    var A, B, b;
    A = _type.Type.define();
    B = _type.Type.define(A);
    b = _type.Type.create(B);
    return [(0, _amen.test)("isType", function () {
      return (0, _assert.default)((0, _type.isType)(B, b));
    }), (0, _amen.test)("areType", function () {
      var check;
      check = (0, _type.areType)(String);
      (0, _assert.default)(check(["1", "2", "3"]));
      (0, _assert.default)(!check("1"));
      (0, _assert.default)(!check(["1", 2, "3"]));
      return (0, _assert.default)(!check([1, 2, 3]));
    }), (0, _amen.test)("isKind", function () {
      return (0, _assert.default)((0, _type.isKind)(A, b));
    }), (0, _amen.test)("areKind", function () {
      var check;
      check = (0, _type.areKind)(A);
      (0, _assert.default)(check([b, b, b]));
      (0, _assert.default)(!check(b));
      (0, _assert.default)(!check([b, 2, b]));
      return (0, _assert.default)(!check([1, 2, 3]));
    })];
  }()), (0, _amen.test)("isEmpty", function () {
    (0, _assert.default)((0, _type.isEmpty)(""));
    (0, _assert.default)(!(0, _type.isEmpty)(" "));
    (0, _assert.default)((0, _type.isEmpty)([]));
    (0, _assert.default)(!(0, _type.isEmpty)([0]));
    (0, _assert.default)((0, _type.isEmpty)({}));
    (0, _assert.default)(!(0, _type.isEmpty)({
      x: 1
    }));
    (0, _assert.default)((0, _type.isEmpty)(new Map()));
    (0, _assert.default)(!(0, _type.isEmpty)(new Map([["x", 1]])));
    (0, _assert.default)((0, _type.isEmpty)(new Set()));
    return (0, _assert.default)(!(0, _type.isEmpty)(new Set([0])));
  })])])));
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-parchment/test/type.coffee