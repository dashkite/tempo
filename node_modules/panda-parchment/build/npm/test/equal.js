"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _time = require("../src/time");

var _equal = require("../src/equal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async function () {
  return (0, _amen.print)((await (0, _amen.test)("equal", [(0, _amen.test)("shallow", function () {
    (0, _assert.default)((0, _equal.equal)("panda", "panda"));
    return (0, _assert.default)(!(0, _equal.equal)("panda", "panda2"));
  }), (0, _amen.test)("deep", function () {
    (0, _assert.default)((0, _equal.equal)({
      x: 1,
      y: {
        z: {
          a: {
            b: {
              c: 12
            }
          }
        }
      }
    }, {
      x: 1,
      y: {
        z: {
          a: {
            b: {
              c: 12
            }
          }
        }
      }
    }));
    return (0, _assert.default)(!(0, _equal.equal)({
      x: 1,
      y: {
        z: {
          a: {
            b: {
              c: 12
            }
          }
        }
      }
    }, {
      x: 1,
      y: {
        z: {
          a: {
            b: {
              c: 13
            }
          }
        }
      }
    }));
  }), (0, _amen.test)("number", function () {
    (0, _assert.default)((0, _equal.equal)(1, 1));
    return (0, _assert.default)(!(0, _equal.equal)(1, 2));
  }), (0, _amen.test)("NaN", function () {
    return (0, _assert.default)(!(0, _equal.equal)(0 / 0, 0 / 0));
  }), (0, _amen.test)("string", function () {
    (0, _assert.default)((0, _equal.equal)(" ", " "));
    return (0, _assert.default)(!(0, _equal.equal)("", " "));
  }), (0, _amen.test)("boolean", function () {
    (0, _assert.default)((0, _equal.equal)(true, true));
    return (0, _assert.default)(!(0, _equal.equal)(true, false));
  }), (0, _amen.test)("regexp", function () {
    (0, _assert.default)((0, _equal.equal)(/panda/gi, /panda/gi));
    return (0, _assert.default)(!(0, _equal.equal)(/panda/gi, /foo/gi));
  }), (0, _amen.test)("date", async function () {
    var A;
    A = new Date();
    (0, _assert.default)((0, _equal.equal)(A, new Date(A)));
    await (0, _time.sleep)(1);
    return (0, _assert.default)(!(0, _equal.equal)(A, new Date()));
  }), (0, _amen.test)("symbol", function () {
    var A;
    A = Symbol("panda");
    (0, _assert.default)((0, _equal.equal)(A, A));
    (0, _assert.default)(!(0, _equal.equal)(Symbol("panda"), Symbol("panda")));
    return (0, _assert.default)(!(0, _equal.equal)(Symbol("panda"), Symbol("bear")));
  }), (0, _amen.test)("error", function () {
    (0, _assert.default)((0, _equal.equal)(new Error("panda"), new Error("panda")));
    return (0, _assert.default)(!(0, _equal.equal)(new Error("panda"), new Error("foobar")));
  }), (0, _amen.test)("array", function () {
    (0, _assert.default)((0, _equal.equal)([1, 2, 3], [1, 2, 3]));
    return (0, _assert.default)(!(0, _equal.equal)([1, 2, 3], [1, 2, 4]));
  }), (0, _amen.test)("map", function () {
    var A, B, C;
    A = new Map();
    B = new Map();
    C = new Map();
    A.set("pandas", "are good");
    B.set("pandas", "are good");
    C.set("pandas", "are best");
    (0, _assert.default)((0, _equal.equal)(A, B));
    return (0, _assert.default)(!(0, _equal.equal)(A, C));
  }), (0, _amen.test)("buffer", function () {
    (0, _assert.default)((0, _equal.equal)(Buffer.from("panda"), Buffer.from("panda")));
    return (0, _assert.default)(!(0, _equal.equal)(Buffer.from("panda"), Buffer.from("foobar")));
  }), (0, _amen.test)("array buffer", function () {
    (0, _assert.default)((0, _equal.equal)(new ArrayBuffer(8), new ArrayBuffer(8)));
    return (0, _assert.default)(!(0, _equal.equal)(new ArrayBuffer(6), new ArrayBuffer(8)));
  }), (0, _amen.test)("data view", function () {
    (0, _assert.default)((0, _equal.equal)(new DataView(new ArrayBuffer(8)), new DataView(new ArrayBuffer(8))));
    return (0, _assert.default)(!(0, _equal.equal)(new DataView(new ArrayBuffer(6)), new DataView(new ArrayBuffer(8))));
  }), // Negative tests
  (0, _amen.test)("weak map", function () {
    try {
      (0, _equal.equal)(new WeakMap(), new WeakMap());
      return _assert.default.fail("comparing WeakMap should throw");
    } catch (error) {}
  }), (0, _amen.test)("set", function () {
    try {
      (0, _equal.equal)(new Set(), new Set());
      return _assert.default.fail("comparing WeakMap should throw");
    } catch (error) {}
  })])));
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-parchment/test/equal.coffee