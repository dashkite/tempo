"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _arrayAdvanced = require("../src/array-advanced");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var indexOf = [].indexOf;

(async function () {
  return (0, _amen.print)((await (0, _amen.test)("advanced array helpers", [(0, _amen.test)("shuffle", function () {
    var A, B, i, len, value; // TODO: Do we want to have a way to generate predictable results out of shuffle for testing purposes?
    // # use a sinon sandbox b/c we're mocking globals
    // sinon.test ->
    //   # stubbing Math.random() allows us to determine the algorithm used
    //   # by expecting a specific result
    //   sinon.stub(Math, "random").returns 0.8
    //   # "Given Math.random() always returns 0.8..."
    //   # * if the biased j = (i * array.size) algorithm is used,
    //   #   the expected result is: [ 9, 1, 2, 3, 4, 5, 6, 7, 10, 8 ]
    //   # * if the fisher-yates algorithm used, the expected result is:
    //   fisher_yates = [ 1, 2, 3, 4, 10, 5, 6, 7, 8, 9 ]
    //   assert.deepEqual (shuffle [1..10]), fisher_yates

    A = [1, 2, 3, 4, 5];
    B = (0, _arrayAdvanced.shuffle)(A);
    (0, _assert.default)(A.length === B.length);

    for (i = 0, len = A.length; i < len; i++) {
      value = A[i];
      (0, _assert.default)(indexOf.call(B, value) >= 0);
    }

    try {
      _assert.default.deepEqual(A, B);

      return _assert.default.fail("shuffled array should not be congruent with input");
    } catch (error) {}
  })])));
})(); // shuffle is *guranteed* to alter the ordering of the array.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1wYXJjaG1lbnQvdGVzdC9hcnJheS1hZHZhbmNlZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQTs7OztBQUhBLElBQUEsT0FBQSxHQUFBLEdBQUEsT0FBQTs7QUFLRyxDQUFBLGtCQUFBO1NBRUQsa0JBQU0sTUFBTSxnQkFBQSx3QkFBQSxFQUErQixDQUV6QyxnQkFBQSxTQUFBLEVBQWdCLFlBQUE7QUFjZCxRQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLENBZGMsQzs7Ozs7Ozs7Ozs7OztBQWNkLElBQUEsQ0FBQSxHQUFJLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBSjtBQUNBLElBQUEsQ0FBQSxHQUFJLDRCQUFBLENBQUEsQ0FBSjtBQUVBLHlCQUFPLENBQUMsQ0FBRCxNQUFBLEtBQVksQ0FBQyxDQUFwQixNQUFBOztBQUNBLFNBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBOztBQUNFLDJCQUFPLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsS0FBUCxDQUFBO0FBREY7O0FBR0EsUUFBQTtBQUNFLHNCQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTs7YUFDQSxnQkFBQSxJQUFBLENBRkYsbURBRUUsQztBQUZGLEtBQUEsQ0FBQSxPQUFBLEtBQUEsRUFBQSxDO0FBdkJ1QyxHQUV6QyxDQUZ5QyxDQUEvQixDQUFaLEU7QUFGRixDQUFHLEksQ0FMSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge3Rlc3QsIHByaW50fSBmcm9tIFwiYW1lblwiXG5cbmltcG9ydCB7c2h1ZmZsZX0gZnJvbSBcIi4uL3NyYy9hcnJheS1hZHZhbmNlZFwiXG5cbmRvIC0+XG5cbiAgcHJpbnQgYXdhaXQgdGVzdCBcImFkdmFuY2VkIGFycmF5IGhlbHBlcnNcIiwgW1xuXG4gICAgdGVzdCBcInNodWZmbGVcIiwgLT5cbiAgICAgICMgVE9ETzogRG8gd2Ugd2FudCB0byBoYXZlIGEgd2F5IHRvIGdlbmVyYXRlIHByZWRpY3RhYmxlIHJlc3VsdHMgb3V0IG9mIHNodWZmbGUgZm9yIHRlc3RpbmcgcHVycG9zZXM/XG4gICAgICAjICMgdXNlIGEgc2lub24gc2FuZGJveCBiL2Mgd2UncmUgbW9ja2luZyBnbG9iYWxzXG4gICAgICAjIHNpbm9uLnRlc3QgLT5cbiAgICAgICMgICAjIHN0dWJiaW5nIE1hdGgucmFuZG9tKCkgYWxsb3dzIHVzIHRvIGRldGVybWluZSB0aGUgYWxnb3JpdGhtIHVzZWRcbiAgICAgICMgICAjIGJ5IGV4cGVjdGluZyBhIHNwZWNpZmljIHJlc3VsdFxuICAgICAgIyAgIHNpbm9uLnN0dWIoTWF0aCwgXCJyYW5kb21cIikucmV0dXJucyAwLjhcbiAgICAgICMgICAjIFwiR2l2ZW4gTWF0aC5yYW5kb20oKSBhbHdheXMgcmV0dXJucyAwLjguLi5cIlxuICAgICAgIyAgICMgKiBpZiB0aGUgYmlhc2VkIGogPSAoaSAqIGFycmF5LnNpemUpIGFsZ29yaXRobSBpcyB1c2VkLFxuICAgICAgIyAgICMgICB0aGUgZXhwZWN0ZWQgcmVzdWx0IGlzOiBbIDksIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDEwLCA4IF1cbiAgICAgICMgICAjICogaWYgdGhlIGZpc2hlci15YXRlcyBhbGdvcml0aG0gdXNlZCwgdGhlIGV4cGVjdGVkIHJlc3VsdCBpczpcbiAgICAgICMgICBmaXNoZXJfeWF0ZXMgPSBbIDEsIDIsIDMsIDQsIDEwLCA1LCA2LCA3LCA4LCA5IF1cbiAgICAgICMgICBhc3NlcnQuZGVlcEVxdWFsIChzaHVmZmxlIFsxLi4xMF0pLCBmaXNoZXJfeWF0ZXNcblxuICAgICAgQSA9IFsxLCAyLCAzLCA0LCA1XVxuICAgICAgQiA9IHNodWZmbGUgQVxuXG4gICAgICBhc3NlcnQgQS5sZW5ndGggPT0gQi5sZW5ndGhcbiAgICAgIGZvciB2YWx1ZSBpbiBBXG4gICAgICAgIGFzc2VydCB2YWx1ZSBpbiBCXG5cbiAgICAgIHRyeVxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsIEEsIEJcbiAgICAgICAgYXNzZXJ0LmZhaWwgXCJzaHVmZmxlZCBhcnJheSBzaG91bGQgbm90IGJlIGNvbmdydWVudCB3aXRoIGlucHV0XCJcbiAgICAgIGNhdGNoXG4gICAgICAgICMgc2h1ZmZsZSBpcyAqZ3VyYW50ZWVkKiB0byBhbHRlciB0aGUgb3JkZXJpbmcgb2YgdGhlIGFycmF5LlxuXG4gIF1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/panda-parchment/test/array-advanced.coffee