"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clone = void 0;

var _pandaGarden = require("panda-garden");

var _pandaGenerics = _interopRequireDefault(require("panda-generics"));

var _type = require("./type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clone, cloneIterator, create, define, isPrimitive;
exports.clone = clone;
({
  create,
  define
} = _pandaGenerics.default);
exports.clone = clone = create({
  name: "clone",
  description: "Creates a deep clone of an entity.",
  // When no match, throw to alert that we cannot deliver a deep clone.
  default: function (entity) {
    throw new Error(`clone: no match on entity ${JSON.stringify(entity)}`);
  }
});
define(clone, _type.isObject, function (original) {
  var copy, key, value;
  copy = new original.constructor();

  for (key in original) {
    value = original[key];
    copy[clone(key)] = clone(value);
  }

  return copy;
});
define(clone, _type.isArrayBuffer, function (original) {
  var copy;
  copy = new original.constructor(original.byteLength);
  new Uint8Array(copy).set(new Uint8Array(original));
  return copy;
});
define(clone, _type.isTypedArray, function (original) {
  return new original.constructor(clone(original.buffer), original.byteOffset, original.length);
});
define(clone, _type.isDataView, function (original) {
  return new original.constructor(clone(original.buffer), original.byteOffset, original.byteLength);
}); // Only available within Node.js API. isBuffer will only match when Buffer is
// available on global. Otherwise, it returns false.

define(clone, _type.isBuffer, function (original) {
  return Buffer.from(original);
});

cloneIterator = function (original, add) {
  var copy, entry;
  copy = new original.constructor();

  for (entry of original) {
    add(copy, entry);
  }

  return copy;
};

define(clone, _type.isMap, function (original) {
  return cloneIterator(original, function (copy, [key, value]) {
    return copy.set(clone(key), clone(value));
  });
});
define(clone, _type.isArray, function (original) {
  return cloneIterator(original, function (copy, entry) {
    return copy.push(clone(entry));
  });
});
define(clone, _type.isSet, function (original) {
  return cloneIterator(original, function (copy, entry) {
    return copy.add(clone(entry));
  });
});

isPrimitive = function (x) {
  return (0, _type.isBoolean)(x) || (0, _type.isNumber)(x) || (0, _type.isString)(x);
};

define(clone, isPrimitive, _pandaGarden.identity);
define(clone, _type.isDate, function (original) {
  return new original.constructor(original);
});
define(clone, _type.isSymbol, function (original) {
  return original.valueOf();
});
define(clone, _type.isRegExp, function (flags) {
  return function (original) {
    var copy;
    copy = new original.constructor(original.source, flags.exec(original));
    copy.lastIndex = original.lastIndex;
    return copy;
  };
}(/\w*$/));
define(clone, _type.isFunction, function (original) {
  throw new Error("clone: does not clone Function");
});
define(clone, _type.isWeakMap, function (original) {
  throw new Error("clone: does not clone WeakMap");
});
define(clone, _type.isError, function (original) {
  throw new Error("clone: does not clone Error");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS1wYXJjaG1lbnQvc3JjL2Nsb25lLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFGQSxJQUFBLEtBQUEsRUFBQSxhQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxXQUFBOztBQVVBLENBQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBO0FBQUEsSUFBQSxzQkFBQTtBQUVBLGdCQUFBLEtBQUEsR0FBUSxNQUFBLENBQ047QUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBO0FBQ0EsRUFBQSxXQUFBLEVBREEsb0NBQUE7O0FBR0EsRUFBQSxPQUFBLEVBQVMsVUFBQSxNQUFBLEVBQUE7QUFDUCxVQUFNLElBQUEsS0FBQSxDQUFVLDZCQUE2QixJQUFJLENBQUosU0FBQSxDQUE3QixNQUE2QixDQUF2QyxFQUFBLENBQU47QUFETztBQUhULENBRE0sQ0FBUjtBQU9BLE1BQUEsQ0FBQSxLQUFBLEVBQUEsY0FBQSxFQUF3QixVQUFBLFFBQUEsRUFBQTtBQUN0QixNQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQTtBQUFBLEVBQUEsSUFBQSxHQUFPLElBQUksUUFBUSxDQUFaLFdBQUEsRUFBUDs7QUFDQSxPQUFBLEdBQUEsSUFBQSxRQUFBLEVBQUE7O0FBQ0UsSUFBQSxJQUFLLENBQUEsS0FBQSxDQUFMLEdBQUssQ0FBQSxDQUFMLEdBQWtCLEtBQUEsQ0FBQSxLQUFBLENBQWxCO0FBREY7O1NBRUEsSTtBQUpGLENBQUEsQ0FBQTtBQU9BLE1BQUEsQ0FBQSxLQUFBLEVBQUEsbUJBQUEsRUFBNkIsVUFBQSxRQUFBLEVBQUE7QUFDM0IsTUFBQSxJQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sSUFBSSxRQUFRLENBQVosV0FBQSxDQUF5QixRQUFRLENBQWpDLFVBQUEsQ0FBUDtBQUNBLE1BQUEsVUFBQSxDQUFBLElBQUEsRUFBQSxHQUFBLENBQXlCLElBQUEsVUFBQSxD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Q0FBTCxJQUFBLENBQTNDLFFBQTJDLENBQTNDLENBQVA7QUFDQSxJQUFBLElBQUksQ0FBSixTQUFBLEdBQWlCLFFBQVEsQ0FBQyxTQUExQjtXQUNBLEk7QUFIRixHO0FBRHNCLENBQUcsQ0FBM0IsTUFBMkIsQ0FBM0IsQ0FBQTtBQVVBLE1BQUEsQ0FBQSxLQUFBLEVBQUEsZ0JBQUEsRUFBMEIsVUFBQSxRQUFBLEVBQUE7QUFDeEIsUUFBTSxJQUFBLEtBQUEsQ0FBQSxnQ0FBQSxDQUFOO0FBREYsQ0FBQSxDQUFBO0FBR0EsTUFBQSxDQUFBLEtBQUEsRUFBQSxlQUFBLEVBQXlCLFVBQUEsUUFBQSxFQUFBO0FBQ3ZCLFFBQU0sSUFBQSxLQUFBLENBQUEsK0JBQUEsQ0FBTjtBQURGLENBQUEsQ0FBQTtBQUdBLE1BQUEsQ0FBQSxLQUFBLEVBQUEsYUFBQSxFQUF1QixVQUFBLFFBQUEsRUFBQTtBQUNyQixRQUFNLElBQUEsS0FBQSxDQUFBLDZCQUFBLENBQU47QUFERixDQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lkZW50aXR5fSBmcm9tIFwicGFuZGEtZ2FyZGVuXCJcbmltcG9ydCBNZXRob2QgZnJvbSBcInBhbmRhLWdlbmVyaWNzXCJcbmltcG9ydCB7XG4gIGlzU3ltYm9sLCBpc1JlZ0V4cCxcbiAgaXNCdWZmZXIsIGlzQXJyYXlCdWZmZXIsIGlzVHlwZWRBcnJheSwgaXNEYXRhVmlldyxcbiAgaXNNYXAsIGlzQXJyYXksIGlzT2JqZWN0LCBpc1NldCxcbiAgaXNCb29sZWFuLCBpc0RhdGUsIGlzTnVtYmVyLCBpc1N0cmluZyxcbiAgaXNGdW5jdGlvbiwgaXNXZWFrTWFwLCBpc0Vycm9yXG59IGZyb20gXCIuL3R5cGVcIlxuXG57Y3JlYXRlLCBkZWZpbmV9ID0gTWV0aG9kXG5cbmNsb25lID0gY3JlYXRlXG4gIG5hbWU6IFwiY2xvbmVcIlxuICBkZXNjcmlwdGlvbjogXCJDcmVhdGVzIGEgZGVlcCBjbG9uZSBvZiBhbiBlbnRpdHkuXCJcbiAgIyBXaGVuIG5vIG1hdGNoLCB0aHJvdyB0byBhbGVydCB0aGF0IHdlIGNhbm5vdCBkZWxpdmVyIGEgZGVlcCBjbG9uZS5cbiAgZGVmYXVsdDogKGVudGl0eSkgLT5cbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJjbG9uZTogbm8gbWF0Y2ggb24gZW50aXR5ICN7SlNPTi5zdHJpbmdpZnkgZW50aXR5fVwiXG5cbmRlZmluZSBjbG9uZSwgaXNPYmplY3QsIChvcmlnaW5hbCkgLT5cbiAgY29weSA9IG5ldyBvcmlnaW5hbC5jb25zdHJ1Y3RvcigpXG4gIGZvciBrZXksIHZhbHVlIG9mIG9yaWdpbmFsXG4gICAgY29weVtjbG9uZSBrZXldID0gY2xvbmUgdmFsdWVcbiAgY29weVxuXG5cbmRlZmluZSBjbG9uZSwgaXNBcnJheUJ1ZmZlciwgKG9yaWdpbmFsKSAtPlxuICBjb3B5ID0gbmV3IG9yaWdpbmFsLmNvbnN0cnVjdG9yIG9yaWdpbmFsLmJ5dGVMZW5ndGhcbiAgbmV3IFVpbnQ4QXJyYXkoY29weSkuc2V0IG5ldyBVaW50OEFycmF5IG9yaWdpbmFsXG4gIGNvcHlcblxuZGVmaW5lIGNsb25lLCBpc1R5cGVkQXJyYXksIChvcmlnaW5hbCkgLT5cbiAgbmV3IG9yaWdpbmFsLmNvbnN0cnVjdG9yIChjbG9uZSBvcmlnaW5hbC5idWZmZXIpLFxuICAgIG9yaWdpbmFsLmJ5dGVPZmZzZXQsIG9yaWdpbmFsLmxlbmd0aFxuXG5kZWZpbmUgY2xvbmUsIGlzRGF0YVZpZXcsIChvcmlnaW5hbCkgLT5cbiAgbmV3IG9yaWdpbmFsLmNvbnN0cnVjdG9yIChjbG9uZSBvcmlnaW5hbC5idWZmZXIpLFxuICAgIG9yaWdpbmFsLmJ5dGVPZmZzZXQsIG9yaWdpbmFsLmJ5dGVMZW5ndGhcblxuIyBPbmx5IGF2YWlsYWJsZSB3aXRoaW4gTm9kZS5qcyBBUEkuIGlzQnVmZmVyIHdpbGwgb25seSBtYXRjaCB3aGVuIEJ1ZmZlciBpc1xuIyBhdmFpbGFibGUgb24gZ2xvYmFsLiBPdGhlcndpc2UsIGl0IHJldHVybnMgZmFsc2UuXG5kZWZpbmUgY2xvbmUsIGlzQnVmZmVyLCAob3JpZ2luYWwpIC0+XG4gIEJ1ZmZlci5mcm9tIG9yaWdpbmFsXG5cblxuXG5jbG9uZUl0ZXJhdG9yID0gKG9yaWdpbmFsLCBhZGQpIC0+XG4gIGNvcHkgPSBuZXcgb3JpZ2luYWwuY29uc3RydWN0b3IoKVxuICBhZGQgY29weSwgZW50cnkgZm9yIGVudHJ5IGZyb20gb3JpZ2luYWxcbiAgY29weVxuXG5kZWZpbmUgY2xvbmUsIGlzTWFwLCAob3JpZ2luYWwpIC0+XG4gIGNsb25lSXRlcmF0b3Igb3JpZ2luYWwsIChjb3B5LCBba2V5LCB2YWx1ZV0pIC0+XG4gICAgY29weS5zZXQgKGNsb25lIGtleSksIChjbG9uZSB2YWx1ZSlcblxuZGVmaW5lIGNsb25lLCBpc0FycmF5LCAob3JpZ2luYWwpIC0+XG4gIGNsb25lSXRlcmF0b3Igb3JpZ2luYWwsIChjb3B5LCBlbnRyeSkgLT4gY29weS5wdXNoIGNsb25lIGVudHJ5XG5cbmRlZmluZSBjbG9uZSwgaXNTZXQsIChvcmlnaW5hbCkgLT5cbiAgY2xvbmVJdGVyYXRvciBvcmlnaW5hbCwgKGNvcHksIGVudHJ5KSAtPiBjb3B5LmFkZCBjbG9uZSBlbnRyeVxuXG5cblxuaXNQcmltaXRpdmUgPSAoeCkgLT4gKGlzQm9vbGVhbiB4KSB8fCAoaXNOdW1iZXIgeCkgfHwgKGlzU3RyaW5nIHgpXG5cbmRlZmluZSBjbG9uZSwgaXNQcmltaXRpdmUsIGlkZW50aXR5XG5cbmRlZmluZSBjbG9uZSwgaXNEYXRlLCAob3JpZ2luYWwpIC0+XG4gIG5ldyBvcmlnaW5hbC5jb25zdHJ1Y3RvciBvcmlnaW5hbFxuXG5kZWZpbmUgY2xvbmUsIGlzU3ltYm9sLCAob3JpZ2luYWwpIC0+XG4gIG9yaWdpbmFsLnZhbHVlT2YoKVxuXG5kZWZpbmUgY2xvbmUsIGlzUmVnRXhwLCBkbyAoZmxhZ3M9L1xcdyokLykgLT5cbiAgKG9yaWdpbmFsKSAtPlxuICAgIGNvcHkgPSBuZXcgb3JpZ2luYWwuY29uc3RydWN0b3Igb3JpZ2luYWwuc291cmNlLCAoZmxhZ3MuZXhlYyBvcmlnaW5hbClcbiAgICBjb3B5Lmxhc3RJbmRleCA9IG9yaWdpbmFsLmxhc3RJbmRleFxuICAgIGNvcHlcblxuXG5cblxuXG5kZWZpbmUgY2xvbmUsIGlzRnVuY3Rpb24sIChvcmlnaW5hbCkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwiY2xvbmU6IGRvZXMgbm90IGNsb25lIEZ1bmN0aW9uXCJcblxuZGVmaW5lIGNsb25lLCBpc1dlYWtNYXAsIChvcmlnaW5hbCkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwiY2xvbmU6IGRvZXMgbm90IGNsb25lIFdlYWtNYXBcIlxuXG5kZWZpbmUgY2xvbmUsIGlzRXJyb3IsIChvcmlnaW5hbCkgLT5cbiAgdGhyb3cgbmV3IEVycm9yIFwiY2xvbmU6IGRvZXMgbm90IGNsb25lIEVycm9yXCJcblxuZXhwb3J0IHtjbG9uZX1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/panda-parchment/src/clone.coffee