"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equal = void 0;

var _pandaGarden = require("panda-garden");

var _pandaGenerics = _interopRequireDefault(require("panda-generics"));

var _object = require("./object");

var _array = require("./array");

var _type = require("./type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var create, define, equal, isPrimitive;
exports.equal = equal;
({
  create,
  define
} = _pandaGenerics.default);
exports.equal = equal = create({
  name: "equal",
  description: "Performs a deep comparison of two entities.",
  default: function (a, b) {
    return a === b;
  }
});
define(equal, _type.isObject, _type.isObject, function (a, b) {
  var i, j, key, keysA, keysB, len;
  keysA = (0, _object.keys)(a);
  keysB = (0, _object.keys)(b);

  if (keysA.length !== keysB.length) {
    return false;
  }

  keysA.sort();
  keysB.sort();

  for (i = j = 0, len = keysA.length; j < len; i = ++j) {
    key = keysA[i];

    if (!equal(keysA[i], keysB[i]) || !equal(a[key], b[key])) {
      return false;
    }
  }

  return true;
});
define(equal, _type.isTypedArray, _type.isTypedArray, function (a, b) {
  var i, j, ref;

  if (a.length !== b.length || a.name !== b.name) {
    return false;
  }

  for (i = j = 0, ref = a.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
});
define(equal, _type.isArrayBuffer, _type.isArrayBuffer, function (a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return equal(new Uint8Array(a), new Uint8Array(b));
});
define(equal, _type.isDataView, _type.isDataView, function (a, b) {
  if (a.byteLength !== b.byteLength || a.byteOffset !== b.byteOffset) {
    return false;
  }

  return equal(a.buffer, b.buffer);
});
define(equal, _type.isBuffer, _type.isBuffer, function (a, b) {
  return a.equals(b);
});

isPrimitive = function (x) {
  return (0, _type.isBoolean)(x) || (0, _type.isNumber)(x) || (0, _type.isString)(x);
};

define(equal, isPrimitive, isPrimitive, function (a, b) {
  return a === b;
});
define(equal, _type.isDate, _type.isDate, function (a, b) {
  return a.getTime() === b.getTime();
});
define(equal, _type.isRegExp, _type.isRegExp, function (a, b) {
  return a.toString() === b.toString();
});
define(equal, _type.isError, _type.isError, function (a, b) {
  return equal(a.name, b.name) && equal(a.message, b.message);
});
define(equal, _type.isSymbol, _type.isSymbol, function (a, b) {
  return a.valueOf() === b.valueOf();
});
define(equal, _type.isArray, _type.isArray, function (a, b) {
  var i, j, ref;

  if (a.length !== b.length) {
    return false;
  }

  for (i = j = 0, ref = a.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
    if (!equal(a[i], b[i])) {
      return false;
    }
  }

  return true;
});
define(equal, _type.isMap, _type.isMap, function (a, b) {
  var key, value, y;

  if (a.size !== b.size) {
    return false;
  }

  for (y of a) {
    [key, value] = y;

    if (!equal(value, b.get(key))) {
      return false;
    }
  }

  return true;
});
define(equal, _type.isSet, _type.isSet, function (a, b) {
  throw new Error("equal: Comparing Sets is potentially costly in terms of memory or computation, so implementation is left to the developer.");
});
define(equal, _type.isWeakMap, _type.isWeakMap, function (a, b) {
  throw new Error("equal: does not compare WeakMap.");
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-parchment/src/equal.coffee