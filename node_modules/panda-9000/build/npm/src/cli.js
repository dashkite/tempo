"use strict";

var _vm = _interopRequireDefault(require("vm"));

var _module = _interopRequireDefault(require("module"));

var _coffeescript = _interopRequireDefault(require("coffeescript"));

var _path = require("path");

var _task = require("./task");

var _pandaQuill = require("panda-quill");

var _safe = require("colors/safe");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path, tasks;
tasks = process.argv.slice(2); // TODO add checks for .js or .litcoffee

path = (0, _path.join)(process.cwd(), "tasks", "index.coffee");

(async function () {
  var error, i, len, name, results;

  try {
    if (await (0, _pandaQuill.isFile)(path)) {
      // import tasks
      _coffeescript.default.run((await (0, _pandaQuill.read)(path)), {
        filename: path,
        bare: true,
        inlineMap: true,
        transpile: {
          presets: [["@babel/preset-env", {
            targets: {
              node: "current"
            }
          }]]
        }
      });

      if (tasks.length === 0) {
        return (0, _task.run)("default");
      } else {
        results = [];

        for (i = 0, len = tasks.length; i < len; i++) {
          name = tasks[i]; // TODO: this is kind of redundant with the code
          // in runner to run dependent tasks

          results.push((await (0, _task.run)(name)));
        }

        return results;
      }
    } else {
      console.error((0, _safe.red)("Unable to find a tasks/index.{js,coffee} file"));
      return process.exit(-1);
    }
  } catch (error1) {
    error = error1;
    return console.error((0, _safe.red)(`p9k: ${error.stack}`));
  }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9wYW5kYS05MDAwL3NyYy9jbGkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFOQSxJQUFBLElBQUEsRUFBQSxLQUFBO0FBUUEsS0FBQSxHQUFRLE9BQU8sQ0FBQyxJQUFSLENBQWEsS0FBYixDQVJSLENBUVEsQ0FBUixDOztBQUVBLElBQUEsR0FBUSxnQkFBSyxPQUFPLENBQVosR0FBSyxFQUFMLEVBQUEsT0FBQSxFQUFBLGNBQUEsQ0FBUjs7QUFFRyxDQUFBLGtCQUFBO0FBQ0QsTUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQTs7QUFBQSxNQUFBO0FBQ0UsUUFBRyxNQUFNLHdCQUFULElBQVMsQ0FBVCxFQUFBOztBQUVFLDRCQUFBLEdBQUEsRUFBWSxNQUFNLHNCQUFsQixJQUFrQixDQUFsQixHQUNFO0FBQUEsUUFBQSxRQUFBLEVBQUEsSUFBQTtBQUNBLFFBQUEsSUFBQSxFQURBLElBQUE7QUFFQSxRQUFBLFNBQUEsRUFGQSxJQUFBO0FBR0EsUUFBQSxTQUFBLEVBQ0U7QUFBQSxVQUFBLE9BQUEsRUFBUyxDQUFDLENBQUEsbUJBQUEsRUFFUjtBQUFBLFlBQUEsT0FBQSxFQUFTO0FBQUEsY0FBQSxJQUFBLEVBQU07QUFBTjtBQUFULFdBRlEsQ0FBRDtBQUFUO0FBSkYsT0FERjs7QUFVQSxVQUFHLEtBQUssQ0FBTCxNQUFBLEtBQUgsQ0FBQSxFQUFBO2VBQ0UsZUFERixTQUNFLEM7QUFERixPQUFBLE1BQUE7QUFLbUIsUUFBQSxPQUFBLEdBQUEsRUFBQTs7QUFBQSxhQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxHQUFBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTt1QkFBQSxDLEVBQUEsQzs7O2tCQUFoQixJLEVBQUEsTUFBTSxlQUFOLElBQU0sQztBQUFVOztlQUxuQixPO0FBWkY7QUFBQSxLQUFBLE1BQUE7QUFtQkUsTUFBQSxPQUFPLENBQVAsS0FBQSxDQUFjLGVBQWQsK0NBQWMsQ0FBZDthQUNBLE9BQU8sQ0FBUCxJQUFBLENBQWEsQ0FwQmYsQ0FvQkUsQztBQXJCSjtBQUFBLEdBQUEsQ0FBQSxPQUFBLE1BQUEsRUFBQTtBQXNCTSxJQUFBLEtBQUEsR0FBQSxNQUFBO1dBQ0osT0FBTyxDQUFQLEtBQUEsQ0FBYyxlQUFJLFFBQVEsS0FBSyxDQUFiLEtBdkJwQixFQXVCZ0IsQ0FBZCxDOztBQXhCSixDQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZtIGZyb20gXCJ2bVwiXG5pbXBvcnQgTW9kdWxlIGZyb20gXCJtb2R1bGVcIlxuaW1wb3J0IGNvZmZlZSBmcm9tIFwiY29mZmVlc2NyaXB0XCJcbmltcG9ydCB7am9pbn0gZnJvbSBcInBhdGhcIlxuaW1wb3J0IHtydW59IGZyb20gXCIuL3Rhc2tcIlxuaW1wb3J0IHtpc0ZpbGUsIHJlYWR9IGZyb20gXCJwYW5kYS1xdWlsbFwiXG5pbXBvcnQge3JlZH0gZnJvbSBcImNvbG9ycy9zYWZlXCJcblxudGFza3MgPSBwcm9jZXNzLmFyZ3ZbMi4uXVxuIyBUT0RPIGFkZCBjaGVja3MgZm9yIC5qcyBvciAubGl0Y29mZmVlXG5wYXRoID0gKGpvaW4gcHJvY2Vzcy5jd2QoKSwgXCJ0YXNrc1wiLCBcImluZGV4LmNvZmZlZVwiKVxuXG5kbyAtPlxuICB0cnlcbiAgICBpZiBhd2FpdCBpc0ZpbGUgcGF0aFxuICAgICAgIyBpbXBvcnQgdGFza3NcbiAgICAgIGNvZmZlZS5ydW4gKGF3YWl0IHJlYWQgcGF0aCksXG4gICAgICAgIGZpbGVuYW1lOiBwYXRoXG4gICAgICAgIGJhcmU6IHRydWVcbiAgICAgICAgaW5saW5lTWFwOiB0cnVlXG4gICAgICAgIHRyYW5zcGlsZTpcbiAgICAgICAgICBwcmVzZXRzOiBbW1xuICAgICAgICAgICAgXCJAYmFiZWwvcHJlc2V0LWVudlwiXG4gICAgICAgICAgICB0YXJnZXRzOiBub2RlOiBcImN1cnJlbnRcIlxuICAgICAgICAgIF1dXG5cbiAgICAgIGlmIHRhc2tzLmxlbmd0aCA9PSAwXG4gICAgICAgIHJ1biBcImRlZmF1bHRcIlxuICAgICAgZWxzZVxuICAgICAgICAjIFRPRE86IHRoaXMgaXMga2luZCBvZiByZWR1bmRhbnQgd2l0aCB0aGUgY29kZVxuICAgICAgICAjIGluIHJ1bm5lciB0byBydW4gZGVwZW5kZW50IHRhc2tzXG4gICAgICAgIChhd2FpdCBydW4gbmFtZSkgZm9yIG5hbWUgaW4gdGFza3NcbiAgICBlbHNlXG4gICAgICBjb25zb2xlLmVycm9yIHJlZCBcIlVuYWJsZSB0byBmaW5kIGEgdGFza3MvaW5kZXgue2pzLGNvZmZlZX0gZmlsZVwiXG4gICAgICBwcm9jZXNzLmV4aXQgLTFcbiAgY2F0Y2ggZXJyb3JcbiAgICBjb25zb2xlLmVycm9yIHJlZCBcInA5azogI3tlcnJvci5zdGFja31cIlxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/panda-9000/src/cli.coffee